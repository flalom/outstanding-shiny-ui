[{"path":"index.html","id":"welcome","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Welcome","text":"book still active development intended 2021 Q2 release R Series Chapman\n& Hall.","code":""},{"path":"index.html","id":"disclaimer","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Disclaimer","text":"book HTML/Javascript/CSS course won’t make become web developer! Instead, provides survival kit customize Shiny. sure however readers want explore topics.","code":""},{"path":"index.html","id":"is-this-book-for-me","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Is this book for me?","text":"going , reader must:comfortable basic R structures concepts, functional object oriented programming (R6)solid knowledge ShinyBasic knowledge HTML JavaScript plus mandatory.fulfill prerequisites, read book answer yes following questions:want know develop shiny apps professional look feel?ever wondered design new input widgets unleash interactivity?simply curious happens hood?","code":""},{"path":"index.html","id":"learning-objectives","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Learning objectives","text":"book help :Manipulate Shiny tags R create custom layoutsHarness power CSS JavaScript quickly design apps standing packDiscover steps import convert existing web frameworks like Bootstrap 4, framework7Learn Shiny internally deals inputsLearn less documented Shiny mechanisms (websockets, sessions, …)","code":""},{"path":"index.html","id":"why-another-shiny-related-book","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Why another Shiny related book?","text":"various Shiny focused resources introducing basic well advanced topics modules Javascript/R interactions, however, handling advanced user interfaces design never emphasis. Clients often desire custom templates, yet generally exceeds core features Shiny (box).Generally, R App developers lack significant background web development often find requirement overwhelming. sentiment motivated writing book, namely provide readers necessary knowledge extend Shiny’s layout, input widgets output elements. project officially started end 2018 stopped Joe Cheng revealed upcoming Mastering Shiny Book. Fortunately, later, cover lot customization Shiny user interfaces. Besides, book may constitute good complement work progress Engineering Production-Grade Shiny Apps ThinkR team, link Shiny CSS/JavaScript covered. deep dive JavaScript R interactions, upcoming book John Coene covers topics like htmlWidgets, interactive documents computations.","code":""},{"path":"index.html","id":"book-structure","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Book structure","text":"book organized six parts.Part 1 demonstrates link Shiny classic web languages like HTML, CSS JavaScript. finish exploring dependencies behind Shiny (Bootstrap, jQuery, …)part 2, dive {htmltools} (Cheng et al. 2020) package, providing functions create manipulate HTML tags R well manage web dependenciesPart 3 contains chapters dedicated Shiny input system highlight partially hidden features like websockets. part starts JavaScript introduction might skipped necessary!Part 4 focuses development new template Shiny demonstrating examples {tablerDash} (Granjon 2020d) package, serious refreshment {shinydashboard} (Chang Borges Ribeiro 2018). , may explored part RinteRface project.Part 5 focuses CSS SASS, showcasing examples R community like {fresh} (Perrier Meyer 2020b), beautify apps lines codePart 6 dives mobile web development practical study involving {shinyMobile} package (Granjon, Perrier, Rudolf 2020)","code":""},{"path":"index.html","id":"code-structure","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Code structure","text":"book side package containing necessary material run code without reload previous snippet.covers Chapters 8, 11 whole Practice section.another good reason package: provide robust method bundle JavaScript/CSS code along side shiny app. Indeed, quite tempting proceed :fine app purpose simple demonstration. case, since aim providing reusable template elements, need better approach, described later.","code":"\nremotes::install_github(\"DivadNojnarg/outstanding-shiny-ui-code\n\")\n\nui <- fluidPage(\n  tags$script(\n    \"$(function() {\n      Shiny.addCustomMessageHandler('hello', function(message) {     alert(message); \n      });\n    });\n    \"\n  ),\n  actionButton(\"go\", \"Send\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$go, {\n    session$sendCustomMessage(\"hello\", message = \"plop\")\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"index.html","id":"preliminary-exercices","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Preliminary exercices","text":"starting technical details, propose play little game. Among images shown, ones corresponding shiny apps?","code":""},{"path":"index.html","id":"extra-material","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Extra material","text":"book may serve material workshops. See list recent events.","code":""},{"path":"index.html","id":"e-rum-2020","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"e-Rum 2020","text":"Novartis associates Mustapha Larbaoui David Granjon gave workshop entitled “Advanced User Interfaces Shiny Developers” latest 2020 virtual e-Rum conference whose detailed agenda available . two hours workshop takes lot inspiration book. RStudio Cloud dedicated project deployed slides located .","code":""},{"path":"index.html","id":"rpharma-2020","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"R/Pharma 2020","text":"books served resource 2020 R/Pharma Unleash Shiny workshop held John Coene, Colin Fay David Granjon. Slides available exercises accessible . workshop expects higher level e-Rum one.","code":""},{"path":"index.html","id":"about-rinterface","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"About RinteRface","text":"RinteRface project initiative aiming provide one famous HTML templates Shiny. Everything started collaboration John Coene David Granjon early 2018 {shinybulma} (Coene 2020) officially release RinteRface November 2018 {shinydashboardPlus} (Granjon 2020c), {bs4Dash} (Granjon 2020a) line-packages.\nFIGURE 0.1: Official release RinteRface, November 28 2018\nbiggest RinteRface accomplishment probably work progress {shinyMobile} package, initially called {shinyF7}, collaboration dreamRs team.Since 2019, RinteRface involved various R related events like local R meetups conferences (Zurich R User Group, baselR, useR2019, satRdayNeuchatel2020, e-Rum2020, RPharma2020).RinteRface contributor Shiny Developers Series, hosted Eric Nantz, also known theRcast.RinteRface work awarded several times 2 latest shiny contests (2019 2020), contributions like:virtual lab teaching physiology (2019), Apps.Physiol plateform, fuelled {bs4Dash} hosted {CaPO4Sim} (Granjon 2020b)\nFIGURE 0.2: virtual patient simulator {CaPO4Sim}\n{deminR} (Devaux Granjon 2020), minesweeper R (2020), powered {shinyMobile}\nFIGURE 0.3: {deminR}, minesweeper R\nRinteRface grateful R community book sort acknowledgment!","code":""},{"path":"index.html","id":"acknowledgements","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Acknowledgements","text":"grateful Douglas Robinson proof reading book fixing many typos containedA special thanks friends John Victor contributing RinteRfaceThanks eRum organizers inviting virtual e-Rum2020 conferenceRinteRface book won’t exist without amazing R community. Thanks valuable feedback","code":""},{"path":"index.html","id":"packages","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"Packages","text":"","code":"\nlibrary(shiny)\n## Warning: package 'shiny' was built under R version 3.6.2\nlibrary(shinydashboard)\n## \n## Attaching package: 'shinydashboard'## The following object is masked from 'package:graphics':\n## \n##     box\nlibrary(cascadess)\n## \n## Attaching package: 'cascadess'## The following object is masked from 'package:graphics':\n## \n##     text\nlibrary(htmltools)\nlibrary(purrr)\n## Warning: package 'purrr' was built under R version 3.6.2\nlibrary(magrittr)\n## \n## Attaching package: 'magrittr'## The following object is masked from 'package:purrr':\n## \n##     set_names\nlibrary(ggplot2)\n## Warning: package 'ggplot2' was built under R version 3.6.2## \n## Attaching package: 'ggplot2'## The following object is masked from 'package:cascadess':\n## \n##     margin\nlibrary(thematic)\nlibrary(fresh)\nlibrary(testthat)\n## \n## Attaching package: 'testthat'## The following objects are masked from 'package:magrittr':\n## \n##     equals, is_less_than, not## The following object is masked from 'package:purrr':\n## \n##     is_null\nlibrary(jstools)\nlibrary(scales)\n## Warning: package 'scales' was built under R version 3.6.2## \n## Attaching package: 'scales'## The following object is masked from 'package:purrr':\n## \n##     discard\nlibrary(dplyr)\n## Warning: package 'dplyr' was built under R version 3.6.2## \n## Attaching package: 'dplyr'## The following object is masked from 'package:testthat':\n## \n##     matches## The following objects are masked from 'package:stats':\n## \n##     filter, lag## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\nlibrary(apexcharter)\n## Warning: package 'apexcharter' was built under R version 3.6.2\nlibrary(shinyWidgets)\n## Warning: package 'shinyWidgets' was built under R version 3.6.2\nlibrary(charpente)\nlibrary(bs4Dash)\n## \n## Attaching package: 'bs4Dash'## The following objects are masked from 'package:shinydashboard':\n## \n##     box, dashboardBody, dashboardHeader, dashboardPage,\n##     dashboardSidebar, dropdownMenu, infoBox, infoBoxOutput, menuItem,\n##     menuSubItem, renderInfoBox, renderValueBox, sidebarMenu,\n##     sidebarUserPanel, tabBox, tabItem, tabItems, updateTabItems,\n##     valueBox, valueBoxOutput## The following objects are masked from 'package:shiny':\n## \n##     column, tabPanel, tabsetPanel, updateTabsetPanel## The following object is masked from 'package:graphics':\n## \n##     box\nlibrary(shinyMobile)\nlibrary(shinybulma)\nlibrary(deminR)\n## \n## Attaching package: 'deminR'## The following objects are masked from 'package:shinyMobile':\n## \n##     f7SubNavbar, updateF7Login\nlibrary(CaPO4Sim)\n## Welcome to the Calcium Phosphate simulator, have Fun!\nlibrary(shinydashboardPlus)\n## \n## Attaching package: 'shinydashboardPlus'## The following objects are masked from 'package:bs4Dash':\n## \n##     attachmentBlock, box, controlbarItem, controlbarMenu,\n##     dashboardControlbar, dashboardFooter, dashboardHeader,\n##     dashboardPage, dashboardSidebar, descriptionBlock, dropdownDivider,\n##     updateControlbarMenu, userMessage, userMessages, userPost,\n##     userPostMedia, userPostTagItem, userPostTagItems## The following object is masked from 'package:shinyWidgets':\n## \n##     progressBar## The following objects are masked from 'package:shinydashboard':\n## \n##     box, dashboardHeader, dashboardPage, dashboardSidebar, messageItem,\n##     notificationItem, taskItem## The following object is masked from 'package:graphics':\n## \n##     box\nlibrary(golem)\nlibrary(tablerDash)\nlibrary(blogdown)\n## Warning: package 'blogdown' was built under R version 3.6.2\nlibrary(httpuv)\n## Warning: package 'httpuv' was built under R version 3.6.2\nlibrary(websocket)\n## Warning: package 'websocket' was built under R version 3.6.2## \n## Attaching package: 'websocket'## The following object is masked from 'package:httpuv':\n## \n##     WebSocket"},{"path":"web-intro.html","id":"web-intro","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1 Shiny and the Web","text":"{shiny} (Chang, Cheng, Allaire, et al. 2020) allows development web applications R minutes. Let’s face : quite mind blowing! may production ready app, still fully functional, working prototype. Believe , web application pure HTML/CSS JavaScript difficult, especially someone non-web developer background.","code":"\nlibrary(shiny)\n"},{"path":"web-intro.html","id":"shiny-generates-html-code-from-r","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.1 Shiny generates HTML code from R","text":"Let’s start little exercise:Run following code:Copy paste code R console. observe?Notice output format example HTML tag. p function generates HTML (see chapter 3). main difference HTML tags Shiny tags absence closing tag Shiny. instance, raw HTML, expect <p> closed <\/p>. Shiny, call p(...), ... may attributes like class/id children tags. R developer, able generate HTML code R allows remain focused main task instead web development burdens.\nstated general introduction ??, production app sometimes needs custom elements contained hidden Shiny’s core.Shiny app less customizable classic web app? ! hood, Shiny engine build HTML tags, R, meaning HTML elements available. may also include custom JavaScript CSS code.","code":"\np(\"Hello World\")\n"},{"path":"web-intro.html","id":"web-intro-html","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2 HTML 101","text":"chapter provides short introduction 3 main web languages, namely HTML, CSS JavaScript.\nfollowing content crucial understand part 3 HTML generation R.","code":""},{"path":"web-intro.html","id":"html-basics","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.1 HTML Basics","text":"HTML (Hypertext Markup Language) derived SGML (Standard Generalized markup Language). HTML file contains tags may divided 2 categories:paired-tags: text inserted opening closing tagclosing-tagsTags may divided 3 categories, based role:structure tags: constitute skeleton HTML page (<title><\/title>, <head><\/head>, <body><\/body>)control tags: script, inputs buttons (). role include external resources, provide interactivity userformatting tags: control size, font wrapped textFinally, distinguish block inline elements:block elements may contain tags take full width (block inline). <div><\/div> commonly used block element. elements block printed top othersinline elements (instance <span><\/span>, <><\/>) printed line. can contain block tags may contain nested inline tags. practice, often see <><span><\/span><\/>inline-block elements allow insert block element inlineConsider following example. clearly bad use HTML conventions since inline tag can host block elements.Importantly, <div> <span> don’t semantic meaning, contrary <header> <footer>, allow structure HTML page.","code":"<!-- paired-tags -->\n<p><\/p>\n<div><\/div>\n\n<!-- self-closing tags -->\n<iframe/>\n<img/>\n<input/>\n<br/><span>\n  <div><p>Hello World<\/p><\/div>\n  <div><\/div>\n<\/span>"},{"path":"web-intro.html","id":"tag-attributes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.2 Tag attributes","text":"Attributes text elements allowing specify properties tag. instance link tag (<><\/>), actually expect just tag : target url open new page … previous examples, tags don’t attributes. Yet, exist large range attributes see 2 now (reason commonly used CSS JavaScript):class: may shared multiple tagsid: must uniqueBoth attributes widely used CSS JavaScript (see Chapter 6 jQuery selectors) apply custom style web page. Class attributes apply multiple elements, however id attribute restricted one item.Interestingly, exists another attribute category, know non-standard attributes like data-toggle. see later book (see Chapter 14).","code":"<div class=\"awesome-item\" id=\"myitem\"><\/div>\n<!-- the class awesome-item may be applied to multiple tags -->\n<span class=\"awesome-item\"><\/span>"},{"path":"web-intro.html","id":"the-simplest-html-skeleton","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.3 The simplest HTML skeleton","text":"HTML page collection tags interpreted web browser step step. simplest HTML page may defined follows:<html> may wrapper<head> <body> 2 main children\n<head> contains dependencies like styles JavaScript files (),\n<body> contains page content displayed screen. see later JavaScript files often added just end <body>.\n<head> contains dependencies like styles JavaScript files (),<body> contains page content displayed screen. see later JavaScript files often added just end <body>.body content displayed screen! W3C validation imposes list title tag head section lang attribute html tag!Let’s write famous Hello World HTML:order preview page web browser, need save snippet script hello-world.html double-click . open default web browser.Shiny app, demonstration purpose (static HTML enough user interaction required).outside, looks identical even though ’ll see Chapter 2 simple app actually contains much HTML previous example.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n  <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n  <!-- body content here -->\n  <\/body>\n<\/html><!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <!-- head content here -->\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n"},{"path":"web-intro.html","id":"about-the-document-object-model-dom","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.4 About the Document Object Model (DOM)","text":"DOM stands “Document Object Model” convenient representation html document. actually exists multiple DOM types, namely DOM-XML DOM-HTML focus latter. consider last example (Hello World), associated DOM tree may inspected Figure 1.1.","code":""},{"path":"web-intro.html","id":"visualizing-the-dom-with-the-html-inspector","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.4.1 Visualizing the DOM with the HTML inspector","text":", introduce tool facilitate exploration beautiful shiny user interfaces. section, restrict description first panel HTML inspector.1 feature available web browsers, however demonstration purposes, focus Chrome DevTools. may opened:right click selecting inspectAfter clicking F12 (windows), fn + F12 Mac (Command+Option+C)following:Open hello-world.html example ChromeRight-click open HTML inspector (developer tools must enabled case)HTML inspector convenient tool explore structure current HTML page. left-hand side, DOM tree displayed clearly see <html> parent <head> <body>. <body> also 1 child, <p>. may preview style (CSS) associated selected element right panel well Event Listeners (JavaScript), discussed later book.\nFIGURE 1.1: Inspection DOM Hello World example\n","code":""},{"path":"web-intro.html","id":"html-inspector-101","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.4.2 HTML Inspector 101","text":"following, enumerate key features inspector Elements tab. addition explore HTML structure, inspector allows :Dynamically change CSS run timeDebug JavaScript code (put break points, …)Run JavaScript code console.Monitor error warning may prevent app website properly workingAnother important feature ability switch different devices, especially mobile platforms global performance audit Google LightHouse. book Colin Fay et al. details relevant elements Shiny app development.propose set quick exercises review important HTML inspector capabilities commonly needed Shiny app customization. consider app already defined :","code":"\nui <- fluidPage(p(\"Hello World\"))\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n"},{"path":"web-intro.html","id":"altering-the-dom-structure","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.4.2.1 Altering the DOM structure","text":"Run Hello World app, right click text element click inspectNotice done similarly clicking top left corner Inspect icon (Command + maj + C Mac) hovering Hello World textYou see result similar Figure 1.2, Inspect icon blue. selected element highlighted white box displays main CSS properties like text-color, font-size, margins, well accessibility parameters.\nFIGURE 1.2: Inspection p element Hello World example\nElements panel, double click <p> <\/p> tags edit current text. Press enter finishedLet’s add children p tag. Right click select Edit HTML option. may enter valid HTML code inside. Don’t forget rules relative inline block tags (inline tags contain block tags!!!)depicted Figure 1.3, done right click p tag display options like:Add/edit attribute. may try add class class=\"awesome-text\" id id=\"-text\"Delete current tag (return key well)Copy element nested elementsOnly copy outside HTML (ignore nested elements)Extract CSS selector JavaScript path (code select element): body > div > p document.querySelector(\"body > div > p\"), respectively. 2 features extremely powerful save time. Try copy paste document.querySelector(\"body > div > p\") JavaScript console bottom inspector window. returns selected HTML element, shown Figure 1.4! Amazing isn’ ?Hide elementForce specific state. instance buttons may active, inactive\nFIGURE 1.3: Modifications p element Hello World example\n\nFIGURE 1.4: Extract JavaScript path select p element\nWhenever looking specific tag complex page, search tag option game changer (Ctrl + F Windows, command + F within Elements tab Mac). See Figure 1.5.\nFIGURE 1.5: Search element “awesome-text” class\nFinally, inspector toolkit allows reorder DOM elements rather intuitive drag drop feature. invite reader carefully explore features crucial next chapters.","code":""},{"path":"web-intro.html","id":"preliminary-introduction-to-css-and-javascript","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5 Preliminary introduction to CSS and JavaScript","text":"introduce section, propose look first website, early 90’s (August 1991 exactly). aesthetic point view (see Figure 1.6), far can observe today shown Figure 1.7.\nFIGURE 1.6: World wide web website\n\nFIGURE 1.7: RinteRface website: https://rinterface.com\ncan explain difference? One main reason absence CSS (Cascading Style Sheet) since first CSS release appeared December 1996, 5 years later first web site publication. CSS allows deeply customize appearance web page changing colors, fonts, margins much . acknowledge, role JavaScript demonstrated previous example. Yet impact important CSS, now impossible dissociate HTML, CSS JavaScript.","code":""},{"path":"web-intro.html","id":"html-and-css","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5.1 HTML and CSS","text":"CSS (Cascading Style Sheets) changes style HTML tags targeting specific classes ids. instance, want p tags red color use:include CSS HTML page, use <style> tag follows:may update hello-world.html script run web-browser see difference. example may slight, shows may control look feel display. development context, see later css files may big better include external files.Let’s build shiny app similar things. reminder, may use tags$style include small pieces CSS app:","code":"p {\n  color: red;\n}<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$style(\"p { color: red;}\"),\n  p(\"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n"},{"path":"web-intro.html","id":"modifying-css-with-the-html-inspector","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5.2 Modifying CSS with the HTML inspector","text":"","code":""},{"path":"web-intro.html","id":"add-inline-properties","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5.2.1 Add inline properties","text":"Run previous app, right click p element open inspector. Styles tab, notice element.style section. define inline new CSS rules selected item. Let’s add 2 rules clicking inside element.style container:border-style: dashed. Indicates want box dashed borderborder-color: .... set border colorAfter typing enter, inline CSS automatically added tag element.can see, CSS rather self-explanatory. probably noticed auto suggestion feature typing property, shown Figure 1.8. Don’t worry everything seems overwhelming moment. ’ll dedicate entire part CSS later book.\nFIGURE 1.8: Edit CSS Chrome DevTools\n","code":""},{"path":"web-intro.html","id":"view-local-changes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5.2.2 View local changes","text":"Whenever playing around web page style shiny app, may good \noverview changes satisfied new design.Run previous shiny app example open inspectorIn Styles tab, add new CSS properties first p element set rulesOnce done press enter click file name located top-right corner property boxThis opens Sources tab. left sidebar, right click file name (index) select Local ModificationsThis opens Git like diff panel called Changes can review change see previous values. refresh page, loose every local change, unless persistent authoring feature active\nFIGURE 1.9: Review CSS changes\nget deeper understanding different CSS options please refer Google documentation.","code":""},{"path":"web-intro.html","id":"html-and-javascript","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"1.2.5.3 HTML and JavaScript","text":"see quickly/seamlessly may add awesome features shiny app.following example, defined changeColor function targets element\nhello id change color property green. HTML element onClick attribute\ntriggers changeColor function time button clicked.lines code, can change color text. beginning!see process dramatically different Shiny app. wrap custom JavaScript tags$script function (prefer external scripts add code), :demonstrated , developing shiny app basically building website R completely compatible web languages, CSS JavaScript. Sections 4 8 present robust tools concepts extend Shiny.","code":"<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <style type=\"text/css\">\n      p {\n        color: red;\n      }\n    <\/style>\n    <script language=\"javascript\">\n      // displays an alert \n      alert('Click on the Hello World text!');\n      // change text color\n      function changeColor(color){\n        document.getElementById('hello').style.color = \"green\";\n      }\n    <\/script>\n    <title>A title<\/title>\n  <\/head>\n  <body>\n    <!-- onclick attributes applies the JavaScript function changeColor define above -->\n    <p id=\"hello\" onclick=\"changeColor('green')\">Hello World<\/p>\n  <\/body>\n<\/html>\nui <- fluidPage(\n  tags$script(\n    \"alert('Click on the Hello World text!');\n     // change text color\n     function changeColor(color){\n       document.getElementById('hello').style.color = 'green';\n     }\n    \"\n  ),\n  p(id = \"hello\", onclick=\"changeColor('green')\", \"Hello World\")\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n"},{"path":"web-dependencies.html","id":"web-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2 Discover Shiny dependencies","text":"","code":""},{"path":"web-dependencies.html","id":"introduction","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.1 Introduction","text":"Shiny creates HTML code us, enough design beautiful working app user interactions. shown earlier, modern web sites apps lot CSS JavaScript hood. Let’s explore elements following exercise.simplest Shiny layout fluidPage. shinyapp predefined Rstudio snippet create basic app skeleton (type shinyapp RStudio IDE):first glance, page contains text. Wait … sure ? Let’s run example open HTML inspector introduced 1.2. Results displayed Figure 2.1.\nFIGURE 2.1: Shiny dependencies\nClick “Open Browser”Open HTML inspectorLocate <head> tagUncollapse search script containing application/html-dependenciesList dependenciesWe see head section (delimited <head><\/head>) Shiny four dependencies:json2jQuery 3.4.1shiny (custom JavaScript CSS)Bootstrap 3.4.1 (JavaScript CSS) + files (html5shiv, respond)","code":"\nui <- fluidPage(\n  p(\"Hello World\")\n)\n\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"web-dependencies.html","id":"bootstrap","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.2 Bootstrap","text":"According gitstar ranking, Bootstrap comes 7th place (144563 stars) 22th place repositories organization, respectively. first released 2011 welcome fifth version months. provides plug play layout interactive elements tabs, navigation bars, tooltips, popovers many input (forms), rather convenient since avoids writing large amount CSS/JavaScript bring complexity. first release Shiny shipped Bootstrap 2. Shiny currently relies Bootstrap 3 since v0.11, lot efforts made provide Bootstrap 4 compatibility, essentially bootstraplib R package.One great advantage using Bootstrap responsiveness design can work either desktop mobile, even though advanced user likely prefer specialized libraries like Framework7 onsenUI develop native looking apps.Bootstrap 3 relies grid layout system allows efficiently organize content row columns. instance fluidRow column Shiny functions leverage Bootstrap grid control elements displayed page.","code":""},{"path":"web-dependencies.html","id":"jquery-dom-manipulation","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.3 jQuery, DOM manipulation","text":"jQuery allows perform DOM manipulation, interacting HMTL elements, user-friendly manner pure JavaScript. step, might familiar JavaScript jQuery. Don’t worry chapter 6 expose basics. comparison select button HTML element technologies. sure ’ll notice jQuery2 intuitive JavaScript.Javascript:jQuery:","code":"var btn = document.getElementById('mybutton'); // select the button\nbtn.addEventListener('click', function() { // action + consequences\n  alert('You clicked me!'); // action\n});$('#mybutton').on('click', function() {\n  alert('You clicked me!');\n});"},{"path":"web-dependencies.html","id":"data-formating","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.4 Data formating","text":"json2 library handle JSON data format (JavaScript Object Notation). see section 7.1 Chapter 7 R / JS communication involves data exchange given data structures R JS, must way ensure translation. done jsonlite package allows transform JSON objects R objects jsonlite::fromJSON inversely jsonlite::toJSON. Shiny automatically handles process works well time!","code":""},{"path":"web-dependencies.html","id":"custom-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.5 Custom dependencies","text":"last dependency contains custom JS CSS code necessary Shiny work, :Fine tuning layoutRegistering input/outputHandling every single input/output actionInitializing controlling R/JS communicationHandling alerts/modals/notifications…Part 7.2, 8, 11 17 showcase important elements custom files.: link CSS part","code":""},{"path":"web-dependencies.html","id":"exercise","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"2.6 Exercise","text":"following exercise, consider complex app slider well plot output.Run app runExample(\"01_hello\")Open HTML inspectorDelete bootstrap.min.css ion.rangeSlider.cssConclusionsTo sump , libraries necessary make Shiny !Chapter 4, explore tools manage HTML dependencies. Chapter 17.4.1, study special case insert dependencies app runtime.Let’s move next part discover internal engine creates HTML code R!","code":""},{"path":"htmltools-overview.html","id":"htmltools-overview","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3 htmltools overview","text":"{htmltools} (Cheng et al. 2020) R package designed :Generate HTML tags RHandle web dependencies (see chapter 4)Historically, {htmltools} extracted {shiny} (Chang, Cheng, Allaire, et al. 2020) able extend , developing custom HTML tags, importing extra dependencies web. ’s , packages many common functions! moment, {htmltools} user guide, although key package web things!","code":""},{"path":"htmltools-overview.html","id":"writing-html-tags-from-r","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.1 Writing HTML Tags from R","text":"{htmltools} provides necessary functions write HTML tags introduced Chapter 1.2. R, even convenient raw HTML since opening/closing tag, simple function call instead:produce HTML <div><\/div> tag. Inside function call, named elements become attributes, whereas unnamed elements become children. cases, tags may empty attributes like <input disabled>. case,\ncorresponding R code input(disabled = NA).","code":"\ndiv()\n"},{"path":"htmltools-overview.html","id":"notations","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.2 Notations","text":"Whether use tags$div div depends tag exported default.\ninstance, use htmltools::div htmltools::nav since nav dedicated function (p, h1, h2, h3, h4, h5, h6, , br, div, span, pre, code, img, strong, em, hr).\nRather prefer htmltools::tags$nav. Alternatively, exists function (shiny htmltools)\ncalled withTags. Wrapping code function allows code like withTags(nav(), ...) instead tags$nav(), thereby omitting tags$ prefixes.\ngather multiple tags together, choose tagList() list(), although HTML output . first shiny.tag.list class addition list. Package like {golem} (Fay et al. 2020) (see also http://golemverse.org) allows test R object tag list. case, using list cause test fail.","code":""},{"path":"htmltools-overview.html","id":"adding-new-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.3 Adding new tags","text":"tag function allows add extra HTML tags already defined. may use follows:Custom TagGood practice check whether created tag line HTML validation rules.","code":"\ncustomTag <- tag(\"test\", list(class = \"test\", p(\"Custom Tag\")))\nstr(customTag)\n## List of 3\n##  $ name    : chr \"test\"\n##  $ attribs :List of 1\n##   ..$ class: chr \"test\"\n##  $ children:List of 1\n##   ..$ :List of 3\n##   .. ..$ name    : chr \"p\"\n##   .. ..$ attribs : Named list()\n##   .. ..$ children:List of 1\n##   .. .. ..$ : chr \"Custom Tag\"\n##   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##  - attr(*, \"class\")= chr \"shiny.tag\"\ncustomTag\n"},{"path":"htmltools-overview.html","id":"alternative-way-to-write-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.4 Alternative way to write tags","text":"{htmltools} comes HTML() function can feed raw HTML:able use tag related functions, following parts.\nTherefore, strongly recommend using R mixing HTML R. Interestingly, \nwant convert raw HTML R code, Shiny App developed Alan\nDipert RStudio, namely html2R. \nissues, non standard attributes (like data-toggle) correctly processed solutions. save precious time! recent approach developed section 18 internally used develop RinteRface templates.","code":"\nHTML('<div>Blabla<\/div>')\n# will render exactly like\ndiv(\"Blabla\")\n\n# but there class is different\nclass(HTML('<div>Blabla<\/div>'))\nclass(div(\"Blabla\"))\n"},{"path":"htmltools-overview.html","id":"playing-with-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5 Playing with tags","text":"","code":""},{"path":"htmltools-overview.html","id":"tags-structure","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.1 Tags structure","text":"tag defined :name span, div, h1 … tag$nameSome attributes, can accessed tag$attribsChildren, can accessed tag$childrenA class, namely shiny.tagFor instance:modify class second child?working? assigning myTag$children[[2]] second_children, second_children$attribs$class <- \"adult\" modifies class copy original object. Thus :","code":"\n# create the tag\nmyTag <- div(\n  class = \"divclass\", \n  id = \"first\",\n  h1(\"Here comes your baby\"),\n  span(class = \"child\", id = \"baby\", \"Crying\")\n)\n# access its name\nmyTag$name\n# access its attributes (id and class)\nmyTag$attribs\n# access children (returns a list of 2 elements)\nmyTag$children\n# access its class\nclass(myTag)\n\nsecond_children <- myTag$children[[2]]\nsecond_children$attribs$class <- \"adult\"\nmyTag\n# This is not working ...\n\nmyTag$children[[2]]$attribs$class <- \"adult\"\nmyTag\n"},{"path":"htmltools-overview.html","id":"useful-functions-for-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2 Useful functions for tags","text":"{htmltools} {shiny} powerful functions seamlessly manipulate tags.","code":""},{"path":"htmltools-overview.html","id":"add-attributes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.1 Add attributes","text":"tagAppendAttributes: function allows add new attribute current tag.instance, assuming created div without id attribute:can pass many attributes want, including non standard attributes data-toggle (see Bootstrap 3 tabs instance):","code":"\nmydiv <- div(\"Where is my brain\")\nmydiv <- tagAppendAttributes(mydiv, id = \"here_it_is\")\n\nmydiv <- tagAppendAttributes(mydiv, list(`data-toggle` = \"tabs\", class = \"myclass\"))\n# even though you could proceed as follows but this requires 2 steps\nmydiv$attribs[[\"data-toggle\"]] <- \"tabs\"\nmydiv$attribs$class <- \"myclass\"\n"},{"path":"htmltools-overview.html","id":"check-if-tag-has-specific-attribute","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.2 Check if tag has specific attribute","text":"tagHasAttribute: check tag specific attributeIn practice, function useful testing tag elements shown chapter 15.","code":"\n# I want to know if div has a class\nmydiv <- div(class = \"myclass\")\nhas_class <- tagHasAttribute(mydiv, \"class\")\nhas_class\n# if you are familiar with %>%\nhas_class <- mydiv %>% tagHasAttribute(\"class\")\nhas_class\n"},{"path":"htmltools-overview.html","id":"get-all-attributes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.3 Get all attributes","text":"tagGetAttribute: get value targeted attributes, exists, otherwise NULL.","code":"\nmydiv <- div(class = \"test\")\n# returns the class\ntagGetAttribute(mydiv, \"class\")\n# returns NULL\ntagGetAttribute(mydiv, \"id\")\n"},{"path":"htmltools-overview.html","id":"set-childchildren","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.4 Set child/children","text":"tagSetChildren allows create children given tag. instance:Notice tagSetChildren removes existing children. see another set functions add children conserving existing ones.","code":"\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\")\n# mydiv has 1 child \"Not the mama!!!\"\nmydiv \nchildren <- lapply(1:3, span)\nmydiv <- tagSetChildren(mydiv, children)\n# mydiv has 3 children, the first one was removed\nmydiv \n"},{"path":"htmltools-overview.html","id":"add-child-or-children","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.5 Add child or children","text":"tagAppendChild tagAppendChildren: add tags existing tag.\nWhereas tagAppendChild takes one tag, can pass list tags tagAppendChildren.","code":"\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\")\notherTag <- span(\"I am your child\")\nmydiv <- tagAppendChild(mydiv, otherTag)\n"},{"path":"htmltools-overview.html","id":"build-your-own-functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.2.6 Build your own functions","text":"might wonder tagRemoveChild tagRemoveAttributes.\nLet’s look tagAppendChildBelow write tagRemoveChild, tag target n position remove list children:defining tagRemoveChild, choose [ instead [[ allow select multiple list elements:Alternatively, also create tagRemoveChildren function. Also notice function raises error provided tag children.tagAppendChild able insert specific position. draft tagInsertChild building top base R append function:","code":"\ntagAppendChild <- function (tag, child) {\n  tag$children[[length(tag$children) + 1]] <- child\n  tag\n}\n\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\", span(\"Hey!\"))\n\n# we create the tagRemoveChild function\ntagRemoveChild <- function(tag, n) {\n  # check if the list is empty\n  if (length(tag$children) == 0) {\n    stop(paste(tag$name, \"does not have any children!\"))\n  }\n  tag$children[n] <- NULL\n  tag\n}\nmydiv <- tagRemoveChild(mydiv, 1)\nmydiv\n\nmydiv <- div(class = \"parent\", id = \"mother\", \"Not the mama!!!\", \"Hey!\")\n# fails\n`[[`(mydiv$children, c(1, 2))\n# works\n`[`(mydiv$children, c(1, 2))\n\ntagInsertChild <- function(tag, child, position) {\n  tag$children <- append(tag$children, list(child), position - 1)\n  tag\n}\n\ntagInsertChild(p(span(\"hello\")), a(), 1)\ntagInsertChild(p(span(\"hello\")), a(), 2)\n"},{"path":"htmltools-overview.html","id":"other-functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.3 Other functions","text":"Golem package written thinkr contains neat functions edit tags.Particularly, tagRemoveAttributes:","code":"\ntagRemoveAttributes <- function(tag, ...) {\n  attrs <- as.character(list(...))\n  for (i in seq_along(attrs)) {\n    tag$attribs[[ attrs[i] ]] <- NULL\n  }\n  tag\n}\n\nmydiv <- div(class = \"test\", id = \"coucou\", \"Hello\")\ntagRemoveAttributes(mydiv, \"class\", \"id\")\n"},{"path":"htmltools-overview.html","id":"conditionally-set-attributes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.4 Conditionally set attributes","text":"Sometimes, want set attributes specific conditions.example fail style=\"color: \" clean. may use conditions:example, style won’t available color specified.","code":"\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}\n\nmy_button()\n\nmy_button <- function(color = NULL) {\n  tags$button( \n    style = if (!is.null(color)) paste(\"color:\", color),\n    p(\"Hello\")\n  )\n}\n\nmy_button(\"blue\")\nmy_button()\n"},{"path":"htmltools-overview.html","id":"using","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.5 Using %>%","text":"lot manipulation tag, don’t need create intermediate\nobjects, good idea use %>% magrittr:pipe syntax overall easier follow read.","code":"\ndiv(class = \"cl\", h1(\"Hello\")) %>% \n  tagAppendAttributes(id = \"myid\") %>%\n  tagAppendChild(p(\"some extra text here!\"))\n"},{"path":"htmltools-overview.html","id":"programmatically-create-children-elements","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.5.6 Programmatically create children elements","text":"Assume want create tag three children inside:structure correct imagine create 1000 span fancier tag. previous approach consistent DRY programming. lapply function useful (purrr map family):","code":"\ndiv(\n  span(1),\n  span(2),\n  span(3),\n  span(4),\n  span(5)\n)\n\n# base R\ndiv(lapply(1:5, function(i) span(i)))\n# purrr + %>%\nmap(1:5, function(i) span(i)) %>% div()\n"},{"path":"htmltools-overview.html","id":"exercises","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.6 Exercises","text":"","code":""},{"path":"htmltools-overview.html","id":"exercise-1-tags-structure-5-minutes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.6.1 Exercise 1: tags structure (5 minutes)","text":"Consider following shiny tag:Inspect structure. Hint: may use str.Access class using tagGetAttribute another method choice.Modify first child class custom class.","code":"\nmyTag <- a(\n  class = \"btn btn-large\",\n  type = \"button\",\n  span(class = \"child1\", id = \"super-span\", 1),\n  span(class = \"child2\", 2)\n)\n\nmyTag\n"},{"path":"htmltools-overview.html","id":"exercise-2-modifiying-tags-5-minutes","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"3.6.2 Exercise 2: modifiying tags (5 minutes)","text":"Let us consider following tag:(may chain functions %>%)Replace unique child (href = \"http://www.google.com\", \"click !\"). Hint: tagSetChildren friend.Add 10 span. Hint: tags may programmatically generated lapply purrr::map.","code":"\ntemp <- div(\"Hello World\")\n"},{"path":"htmltools-dependencies.html","id":"htmltools-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4 Dependency utilities","text":"creating new template, import custom HTML dependencies available shiny. Fortunately, problem {htmltools} (Cheng et al. 2020)!","code":""},{"path":"htmltools-dependencies.html","id":"the-dirty-approach","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.1 The dirty approach","text":"Let’s consider following example. Since Bootstrap one popular HTML/CSS/JS framework develop websites web apps, want include bootstrap 4 card shiny app. case study taken RStudio Community question. naive approach include HTML code directly app code. approach dirty since easily re-usable others.Nothing displayed expected since {shiny} (Chang, Cheng, Allaire, et al. 2020) contain bootstrap 4 dependencies card bootstrap 4 element. Don’t panic! load necessary css display card (required, include javascript well). use either includeCSS(), tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"custom.css\")). See . Web development best practice recommend point external file rather including CSS head directly tag (inline CSS). example, use CDN (content delivery network) local file located www/ folder.card may seem ugly least displayed.","code":"\n# we create the card function before\nmy_card <- function(...) {\n  withTags(\n    div(\n      class = \"card border-success mb-3\",\n      div(class = \"card-header bg-transparent border-success\"),\n      div(\n        class = \"card-body text-success\",\n        h3(class = \"card-title\", \"title\"),\n        p(class = \"card-text\", ...)\n      ),\n      div(class = \"card-footer bg-transparent border-success\", \"footer\")\n    )\n  )\n}\n\n# we build our app\nshinyApp(\n  ui = fluidPage(\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"blablabla. PouetPouet Pouet.\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)\n\nshinyApp(\n  ui = fluidPage(\n    # load the css code\n    tags$head(\n      tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\")\n    ),\n    fluidRow(\n      column(\n        width = 6,\n        align = \"center\",\n        br(),\n        my_card(\"blablabla. PouetPouet Pouet.\")\n      )\n    )\n  ),\n  server = function(input, output) {}\n)\n"},{"path":"htmltools-dependencies.html","id":"the-clean-approach","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.2 The clean approach","text":"best approach consists leveraging htmlDependency attachDependencies functions {htmltools}.\nhtmlDependency function takes following main parameters:dependency namethe version (useful remember version built upon)path dependency (can CDN local folder)script stylesheet respectively pass css scriptsIf pointing CDN use local files, crucial wrap htmlDependency function since path determined run time package builds. means developing package dependencies, forgetting step might prevent users get dependency working machine (differences Unix Windows OS paths clearly good example).create card tag give bootstrap 4 dependency attachDependencies function. recent version {htmltools}, may simply use tagList(tag, deps) instead. Importantly, attachDependencies append parameter FALSE default. Ensure set TRUE want keep already attached dependencies!finally run app:approach, can develop package custom dependencies people\nuse need add custom elements shiny.","code":"\n# handle dependency\ncard_css <- \"bootstrap.min.css\"\nbs4_card_dep <- function() {\n  htmlDependency(\n    name = \"bs4_card\",\n    version = \"1.0\",\n    src = c(href = \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/\"),\n    stylesheet = card_css\n  )\n}\n\n# create the card\nmy_card <- function(...) {\n  cardTag <- withTags(\n    div(\n      class = \"card border-success mb-3\",\n      div(class = \"card-header bg-transparent border-success\"),\n      div(\n        class = \"card-body text-success\",\n        h3(class = \"card-title\", \"title\"),\n        p(class = \"card-text\", ...)\n      ),\n      div(class = \"card-footer bg-transparent border-success\", \"footer\")\n    )\n  )\n  \n  # attach dependencies (old way)\n  # htmltools::attachDependencies(cardTag, bs4_card_dep())\n  \n  # simpler way\n  tagList(cardTag, bs4_card_dep())\n  \n}\n\n# run shiny app \nui <- fluidPage(\n  title = \"Hello Shiny!\",\n  fluidRow(\n    column(\n      width = 6,\n      align = \"center\",\n      br(),\n      my_card(\"blablabla. PouetPouet Pouet.\")\n    )\n  )\n)\n\nshinyApp(ui, server = function(input, output) { })\n"},{"path":"htmltools-dependencies.html","id":"another-example-importing-html-dependencies-from-other-packages","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.3 Another example: Importing HTML dependencies from other packages","text":"{shinydashboard} (Chang Borges Ribeiro 2018) package helps design dashboards shiny. following, like integrate box component classic Shiny App (without dashboard layout). However, try include box tag, notice nothing displayed since {shiny} {shinydashboard} dependencies. {htmltools} contains function, namely findDependencies looks dependencies attached tag. going , let’s define basic skeleton dashboard:numerous details associated shinydashboard go . interested learning , please help . key point main wrapper function dashboardPage. fluidPage another wrapper function already familiar . apply findDependencies dashboardPage.deps list containing four dependencies:Font Awesome handles icons. Interestingly, dependency provided dashboardHeader, especially shiny::icon(\"bars\") collapses left sidebarBootstrap main HTML/CSS/JS template. Importantly,\nplease note version 3.3.7, whereas current 4.5.2AdminLTE dependency containing HTML/CSS/JS related admin template.\nclosely linked Bootstrap 3shinydashboard, CSS javascript necessary dashboard work properly. practice,\nintegrating custom HTML templates shiny usually work box many reasons modifications necessary. instance, list changes optimize adminLTE shiny. major consequences template maintenance upgrading another AdminLTE version require modify elements hand. may understand template maintainers quite often reluctant upgrade dependencies might brake whole package, quite easily., attach dependencies box tagList, shown . Notice custom box contain parameters official {shinydashboard} version, actually ok time.now limitless possibilities! Interestingly, approach basis shinyWidgets useBs4Dash function related tools.","code":"\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(),\n    title = \"Dashboard example\"\n  ),\n  server = function(input, output) { }\n)\n\ndeps <- findDependencies(\n  dashboardPage(\n    header = dashboardHeader(), \n    sidebar = dashboardSidebar(), \n    body = dashboardBody()\n  )\n)\ndeps\n## [[1]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.13.0\"\n##  $ src       :List of 1\n##   ..$ file: chr \"www/shared/fontawesome\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : chr \"shiny\"\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[2]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.13.0\"\n##  $ src       :List of 1\n##   ..$ file: chr \"www/shared/fontawesome\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr [1:2] \"css/all.min.css\" \"css/v4-shims.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : chr \"shiny\"\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[3]]\n## List of 10\n##  $ name      : chr \"bootstrap\"\n##  $ version   : chr \"3.4.1\"\n##  $ src       :List of 2\n##   ..$ href: chr \"shared/bootstrap\"\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shiny/www/shared/bootstrap\"\n##  $ meta      :List of 1\n##   ..$ viewport: chr \"width=device-width, initial-scale=1\"\n##  $ script    : chr [1:3] \"js/bootstrap.min.js\" \"shim/html5shiv.min.js\" \"shim/respond.min.js\"\n##  $ stylesheet: chr \"css/bootstrap.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[4]]\n## List of 10\n##  $ name      : chr \"options\"\n##  $ version   : chr \"2.0.0.9000\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboardPlus/shinydashboardPlus-0.6.0\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: NULL\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[5]]\n## List of 10\n##  $ name      : chr \"shinydashboardPlus\"\n##  $ version   : chr \"2.0.0.9000\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboardPlus/shinydashboardPlus-0.6.0\"\n##  $ meta      : NULL\n##  $ script    : chr [1:2] \"js/app.min.js\" \"js/shinydashboardPlus.js\"\n##  $ stylesheet: chr [1:3] \"css/AdminLTE.min.css\" \"css/_all-skins.min.css\" \"css/custom.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[6]]\n## List of 10\n##  $ name      : chr \"shinydashboard\"\n##  $ version   : chr \"0.7.1\"\n##  $ src       :List of 1\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/shinydashboard\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr \"shinydashboard.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\nmy_box <- function(title, status) {\n  tagList(box(title = title, status = status), deps)\n}\nui <- fluidPage(\n  titlePanel(\"Shiny with a box\"),\n  my_box(title = \"My box\", status = \"danger\"),\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"htmltools-dependencies.html","id":"suppress-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.4 Suppress dependencies","text":"rare cases, may need remove existing conflicting dependency. suppressDependencies function allows users perform . instance, shiny.semantic built top \nsemantic ui compatible Bootstrap. , remove AdminLTE dependency\n{shinydashboard} page nothing displayed (expected):","code":"\nshinyApp(\n  ui = dashboardPage(\n    dashboardHeader(),\n    dashboardSidebar(),\n    dashboardBody(suppressDependencies(\"AdminLTE\")),\n    title = \"Dashboard example\"\n  ),\n  server = function(input, output) { }\n)\n"},{"path":"htmltools-dependencies.html","id":"resolve-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.5 Resolve dependencies","text":"Imagine situation like use last version fontawesome icons, currently 5.15.1 according jsdelivr. recall {shiny} already provides version 5.13.0 icon function. Including another version probably cause conflicts like avoid case. {htmltools} resolveDependencies tool consists removing redundant element, taking last version dependencies names identical.Combining findDependencies, suppressDependencies resolveDependencies gives great power successfully manage dependencies!","code":"\nnew_icon_dep <- htmlDependency(\n  name = \"font-awesome\", \n  version = \"5.15.1\", \n  src = c(href = \"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.1/\"),\n  stylesheet = \"css/all.min.css\"\n)\n\nicon_deps <- list(new_icon_dep, findDependencies(shiny::icon(\"th\"))[[1]])\n\nresolveDependencies(icon_deps)\n## [[1]]\n## List of 10\n##  $ name      : chr \"font-awesome\"\n##  $ version   : chr \"5.15.1\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.1/\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr \"css/all.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\""},{"path":"htmltools-dependencies.html","id":"insert-custom-script-in-the-head","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"4.6 Insert Custom script in the head","text":"{shinydashboardPlus}, users can fine tune dashboard behavior simple option parameter passed dashboardPagePlus. sidebarExpandOnHover capability consists expanding sidebar hovering part options, yet exposed {shinydashboard}. hood, options gathered (nested) list, converted JSON eventually generate JavaScript configuration file. now, saw two ways include scripts stylesheets. include arbitrary script (defined fly user app starts) dependency?htmlDependency head parameter allowing pass lines HTML insert document head. can easily imagine passing string containing script. , first construct options list. , create dependency: notice since src mandatory, give value use script stylesheet arguments.invite reader run example involving {shinydashboardPlus}, open HTML inspector look head.According AdminLTE documentation, global options must passed loading app.min.js script. Creating “dummy” dependency allowed us isolate script insert app.min.js script (contained another dependency), shown Figure 4.1.\nFIGURE 4.1: Insert arbitrary script head\n","code":"\noptions <- list(\n  sidebarExpandOnHover = TRUE, \n  boxWidgetSelectors = list(\n    remove = '[data-widget=\"remove\"]'\n  )\n)\n\nconfig_script <- function() {\n  htmlDependency(\n    \"options\",\n    as.character(utils::packageVersion(\"shinydashboardPlus\")),\n    src = c(file = system.file(\"shinydashboardPlus-0.6.0\", package = \"shinydashboardPlus\")),\n    head = if (!is.null(options)) {\n      paste0(\n        \"<script>var AdminLTEOptions = \", \n        jsonlite::toJSON(\n          options, \n          auto_unbox = TRUE,\n          pretty = TRUE\n        ),\n        \";<\/script>\"\n      )\n    }\n  )\n}\n\n# show the script\nprint(HTML(config_script()$head))\n## <script>var AdminLTEOptions = {\n##   \"sidebarExpandOnHover\": true,\n##   \"boxWidgetSelectors\": {\n##     \"remove\": \"[data-widget=\\\"remove\\\"]\"\n##   }\n## };<\/script>\n shinyApp(\n   ui = dashboardPagePlus(\n     collapse_sidebar = TRUE,\n     options = options,\n     header = dashboardHeaderPlus(\n      enable_rightsidebar = TRUE,\n      rightSidebarIcon = \"gears\"\n     ),\n     sidebar = dashboardSidebar(),\n     body = dashboardBody(),\n     rightsidebar = rightSidebar(),\n     title = \"DashboardPage\"\n   ),\n   server = function(input, output) { }\n )\n"},{"path":"htmltools-other-tools.html","id":"htmltools-other-tools","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"5 Other tools","text":"","code":""},{"path":"htmltools-other-tools.html","id":"css","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"5.1 CSS","text":"Sometimes, temptating write inline CSS tag style attribute, instance:number CSS properties grows, code may become hard read. {cascadess} package developed Nathan Teetor provides readable syntax, works well %>%.{cascadess} pleasing way learn CSS R. instance, CSS text formating includes properties like text-color, text-align, …text function parameters, namely color, align, shown example.Notice included cascadess function, nothing htmldependency object necessary apply styles elements.Try run previous example without element. Nothing properly displayed!","code":"\ntitle <- h4(\n  \"A title\",\n  style = \"color: cyan; text-align: center; margin-top: 100px;\"\n)\nshinyApp(ui = title, server = function(input, output) {})\n\nui <- list(\n  cascadess(),\n  h4(\n    \"A title\",\n    .style %>%\n      text(color = \"cyan\", align = \"center\") %>%\n      margin(top = 5)\n  )\n)\nshinyApp(ui, server = function(input, output) {})\n\ncascadess()\n## List of 10\n##  $ name      : chr \"cascadess\"\n##  $ version   : chr \"0.1.0\"\n##  $ src       :List of 2\n##   ..$ file: chr \"/Library/Frameworks/R.framework/Versions/3.6/Resources/library/cascadess/www/cascadess\"\n##   ..$ href: chr \"cascadess/cascadess\"\n##  $ meta      : NULL\n##  $ script    : NULL\n##  $ stylesheet: chr \"cascadess.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\""},{"path":"survival-kit-javascript.html","id":"survival-kit-javascript","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6 JavaScript for Shiny","text":"understand Shiny works inside, especially inputs handled, ’ll gradually dive core contains substantial amount JavaScript (JS).chapter brief introduction JS jQuery still necessary book supposed standalone. Advanced JS users may skip part. MDN web docs Mozilla excellent resource.","code":""},{"path":"survival-kit-javascript.html","id":"shiny-javascript-sources","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.1 Shiny JavaScript sources","text":"Let’s look {shiny} (Chang, Cheng, Allaire, et al. 2020) github project. R package, composed standard folders like R, man, tests elements. inst folder contains resources external dependencies like Bootstrap 3, jQuery, datatables, fontawesome, … mentioned Chapter 2 sorted www/shared sub-folder well whole CSS JS Shiny codes. Notice presence minified files like shiny.min.js non minified elements shiny.css. Overall, minification process reduces loading time web page removing comments, extra spaces, thereby decreasing file size. instance shiny.js 6628 lines code, shiny.min.js 4.Notice srcjs/ folder shown Figure 6.1. actually contains pieces reconstruct whole shiny.js file.\nFIGURE 6.1: Shiny JavaScript sources\n_start.js _end.js used Gruntfile.js, grunt-based tool run different tasks concatenate multiple JavaScript files, lint code, minify … See summary.Since Chapter (shiny-input-system) ’ll use script, little understanding basic underlying JavaScript concepts necessary.","code":"grunt.registerTask('default', [\n  'concat',\n  'string-replace',\n  'validateStringReplace',\n  'eslint',\n  'configureBabel',\n  'babel',\n  'uglify'\n]);"},{"path":"survival-kit-javascript.html","id":"introduction-to-javascript","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.2 Introduction to JavaScript","text":"JavaScript created 1995 Brendan Eich also known ECMAScript (ES). Interestingly, might heard ActionScript, implementation ES Adobe Systems. Nowadays, JavaScript centerpiece web development across websites.quick example. personal blog, probably know Hugo Jekyll, especially R interfaces like blogdown (Xie 2020a). tools allow one rapidly develop nice looking blog just minutes, focusing content rather technical aspects, really point! Now, open HTML inspector introduced Chapter 1.2, click elements tab, may open default, uncollapse <head> tag, see lot scripts included, shown Figure 6.2. Similarly <body> tag.\nFIGURE 6.2: website full JavaScript\nthree ways include scripts:Use <script> tag JS code insideAdd onclick attribute HTML tag (preferably button) trigger JS soon clicked (similar event listeners, see )Import external file containing JS code onlyWhether choose first, second third method depends content script. consider JS library jQuery, unfortunately contains much code making challenge understand. often makes users avoid first method.","code":"<script type=\"text/javascript\">\n// JS code here\n<\/script><button id=\"hello\" onclick=\"jsFunction()\">Hello World<\/button><!-- We use the src attribute to link the external file -->\n<script type=\"text/javascript\" src=\"file.js\">"},{"path":"survival-kit-javascript.html","id":"setup","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.3 Setup","text":"Like R Python, JavaScript (JS) interpreted language. executed client-side, words browser. also means JS code may run without suitable tool. following, ’ll list tools test JS code, even though JS may also run web browser developer tools, demonstrated section 6.6.","code":""},{"path":"survival-kit-javascript.html","id":"node","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.3.1 Node","text":"Node contains interpreter JS well dependencies manager, npm (Node Package Manager). install Node computer, browse website follow installation instructions. Afterwards, open terminal check ifreturns something. , Node may properly installed.prefer installing Node, exists alternatives like repl., offering Node.js online compiler environment. enough follow exercises part.","code":"$ which node\n$ node --version"},{"path":"survival-kit-javascript.html","id":"choose-a-good-ide","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.3.2 Choose a good IDE","text":"Personally, really like VSCode coding JS, contains Node interpreter allowing seamlessly execute JS code. side note, encourage try dracula color theme, favorite! R user, also like Rstudio IDE, provided Node installed. , explain run JS code IDE’s. section 6.6, show manipulate JS code directly web browser, HTML inspector. method mostly use remaining book since also work HTML CSS time.","code":""},{"path":"survival-kit-javascript.html","id":"first-script","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.3.3 First Script","text":"Let’s write first script:notice instruction end ;. can run script either Rstudio IDE VSCode.\nFIGURE 6.3: Run JS VSCode\nVSCode, clicking run arrow (top center) Figure 6.3, triggers node hello.js command, tells Node run script. see result right panel (code=0 means execution fine even compute time). run script RStudio IDE, one needs click terminal tab (also open basic terminal) type node hello.js (node mycustompath/hello.js folder containing script). see Hello World message console (see Figure 6.4).\nFIGURE 6.4: Run JS terminal\n","code":"console.log(\"Hello World\");"},{"path":"survival-kit-javascript.html","id":"programming-with-js-basis","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4 Programming with JS: basis","text":"now set introduce basis JS. many languages, JS made variables instructions. instructions end ; symbol.","code":""},{"path":"survival-kit-javascript.html","id":"js-types","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.1 JS types","text":"JS defines several types:Number: distinguish integers others (R instance, numeric contains integers double)String: characters (‘blabla’)Boolean: true/falseTo check type element, may use typeof operator.JS, typeof function like R!!! Therefore don’t write typeof('string');.","code":"typeof 1; // number\ntypeof 'pouic'; // string"},{"path":"survival-kit-javascript.html","id":"variables","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.2 Variables","text":"Variables key elements programming languages. allow store intermediate results manipulations. JS, variable defined :typea namea valueA valid variable name:Doesn’t use reserved JS name like typeof!Doesn’t start number (123soleil)!Doesn’t include space (total price)!Besides, code style critical element programming, increasing readability, general consistence. several styles, main ones snake_case camelCase. personally use camelCase syntax write variables JS.two ways create variables JavaScript.","code":""},{"path":"survival-kit-javascript.html","id":"const","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.2.1 Const","text":"JavaScript, variable may created const:shown , variables:modifiedCannot share nameMust assigned value","code":"const n = 1;\nn = 2; // error\nconst n = 3; // error\nconst a;\na = 1; // errors"},{"path":"survival-kit-javascript.html","id":"let","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.2.2 let","text":"Another way define variable:may use mathematical operators manipulate variables.List numerical operators JS:+-*/% (modulo)++ (incrementation)-- (decrementation)concatenate two strings, use + symbol.may also know var declare variables. difference let? mainly scope reason:see later still use var shiny core many R packages.","code":"let myVariable = 'welcome';\nmyVariable = 1;\nconsole.log(myVariable);let myNumber = 1; // affectation\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0var i = 1;\n{\n  var i = 2; // this will modify i globally, not locally\n}\nconsole.log(`i is ${i}`); // i is 2.\n\nlet j = 1;\n{\n  let j = 2; // j is only declared locally and not globally!\n}\nconsole.log(`j is ${j}`); // j is 1"},{"path":"survival-kit-javascript.html","id":"conditions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.3 Conditions","text":"operators check conditions.=== (equal value, equal type B)== (equal B)!== (equal value equal type B)!= (equal B)>, >=<, <=(B) &&(B) ||Importantly, prefer === !== compare elements since 5 == \"5\" return true, generally want!test conditions exists several ways:(condition) { console.log('Test passed'); }(condition) { instruction } else { instruction B }ternary operator shortcut condition ? instruction true : instruction false may chained. complex instructions, recommend using , may affect code readability.Whenever lot possible conditions evaluated, better choose switch.","code":"switch (variable) {\n  case val1: // instruction 1\n  break; // don't forget the break!\n  case val2:  // instruction 2\n  break;\n  default: // when none of val1 and val2 are satisfied\n}"},{"path":"survival-kit-javascript.html","id":"objects","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.4 Objects","text":"JavaScript object oriented programming language (like Python). object defined :typesome propertiessome methods (manipulate properties)Let’s construct first object:comments code:access object property, use object.<propertiy_name>.print human readable version object, JSON.stringify job.introduced string interpolation ${*}. * may valid expression.Methods accessed like properties (may also pass parameters). use refer object . Take note, see lot!JavaScript, already predefined objects interact arrays, dates.","code":"const me = {\n  name : 'Divad',\n  age : 29,\n  music : '',\n  printName: function() {\n    console.log(`I am ${this.name}`);\n  }\n}\n\nme.geek = true; // works (see const variables above)\nconsole.log(JSON.stringify(me)); // print a human readable object.\n  \nconsole.log(me.name);\nconsole.log(me.age);\nconsole.log(me.music);\n// don't repeat yourself!!!\nfor (let key in me) { // here is it ok to use `in`\n console.log(`me[${key}] is ${me[key]}`);\n}\n\nme.printName();\n\nme = {\n  name: 'Paul',\n  age: 40\n} // error (see const variables above)"},{"path":"survival-kit-javascript.html","id":"arrays","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.4.1 Arrays","text":"array structure allowing store information instance:Array may nested:arrays, elements may accessed index, mentioned , first index 0 (1 like R). convenient way print array’s elements use iteration:Note length method returns size array convenient loops. table referencing principal methods arrays (use later).Quite honestly, mainly use push length next chapters.","code":"const table = [1, 'plop'];\ntable.push('hello');\ntable = [2]; // error (as explain in above in the variable part)\nconsole.log(table);const nested = [1, ['a', [1, 2, 3]], 'plop'];\nconsole.log(nested);const nested = [1, ['a', [1, 2, 3]], 'plop'];\nfor (let i of nested) {\n  console.log(i);\n}\n\n// or with the classic approach\nfor (let i = 0; i < nested.length; i++) {\n  console.log(nested[i]);\n}"},{"path":"survival-kit-javascript.html","id":"strings","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.4.2 Strings","text":"main methods related String object (character R).","code":""},{"path":"survival-kit-javascript.html","id":"math","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.4.3 Math","text":"mention useful methods handle mathematical objects.classic functions like sqrt, trigonometric functions course available. call Math.* prefix.","code":""},{"path":"survival-kit-javascript.html","id":"iterations","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.5 Iterations","text":"Iterations allow repeat instruction set instructions multiple times. Let’s assume array containing 100000 random numbers. automatically print ? going see !","code":""},{"path":"survival-kit-javascript.html","id":"for-loops","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.5.1 For loops","text":"loop multiple uses. classic case start defining index (variable). set upper bound (array length) finish incrementing index value. code curly braces executed.way created array bit special deserves explanations:Array method define new array. call way Array(arrayLength) since don’t want write 100 values 1 1. try console.log(Array(10)); get [ <10 empty items> ], meaning 10 slots available nothing inside yet.keys defines keys table index. reminder, since Array(10) object (check console.log(typeof Array(10));) may use Array(10).keys(). creates Array Iterator.... spread syntax, called iterable object (see ).Contrary R, JavaScript index starts 0 (1)! good keep mind mix R JS.Let’s look forEach method arrays (introduced ES5):another way create loop (introduced ES6):loop use? answer : depends situation! Actually, even exists ways (replace get indexes array, like first code, really recommended).","code":"const table = [...Array(100).keys()]; // create an empty array of length 100 (so from 0 to 99, not from 1 to 100 like in R!!!)\nfor (let i = 0; i < table.length; i++) {\n    console.log(table[i]); \n}const letters = [\"a\", \"b\", \"c\", \"d\"];\nletters.forEach((letter) => {\n  console.log(letter);\n});const samples = ['blabla', 1, null]; // this is an array!\nfor (let sample of samples) {\n console.log(sample);\n}"},{"path":"survival-kit-javascript.html","id":"other-iterations-while","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.5.2 Other iterations: while","text":"loops another way iterate, long condition defined TRUE. incrementation step done end instruction.","code":"const h = 3; i = 0;\nwhile (i <= h) {\n  console.log(i);\n  i++; // we need to increment to avoid infinite loop\n}"},{"path":"survival-kit-javascript.html","id":"functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.6 Functions","text":"Functions useful wrap succession instructions accomplish given task. Defining functions allows programmers save time (less copy paste, less search replace), make less errors easily share code. modern JavaScript (ES6), functions defined follows:functions computes maximum 2 provided numbers. comments scoping rules: variables defined inside function available function, available outside function definition. noted functions may use global variables defined outside .","code":"const a = 1;\nconst fun = (parm1, parm2) => {\n  console.log(a);\n  let p = 3;\n  return Math.max(parm1, parm2); // I use the Math object that contains the max method\n}\nlet res = fun(1, 2);\nconsole.log(res); // prints a and 2. a global\nconsole.log(p); // fails because p was defined inside the function"},{"path":"survival-kit-javascript.html","id":"export-functions-about-modules","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.6.1 Export functions: about modules","text":"happens wrote 100 functions want reuse different scripts? prevent copying pasting, now introduce concept modules. Let’s save function script utils.js:create test.js script folder calls findMax function. , import corresponding module:","code":"const findMax = (parm1, parm2) => {\n  return Math.max(parm1, parm2); // I use the Math object that contains the max method\n}\n\nmodule.exports = {\n  findMax = findMax\n}const {findMax} = require('./utils.js');\nfindMax(1, 2); // prints 2"},{"path":"survival-kit-javascript.html","id":"event-listeners","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.4.7 Event listeners","text":"explore web application, clicking button usually triggers something like computation, modal alert. work? JavaScript, interactivity plays critical role. Indeed, want web application react user inputs like mouse clicks keyboard events. introduce DOM events.Let’s consider basic HTML button.JavaScript side, first capture button element using id selector (getElementById).apply addEventListener method. short, event listener program triggers given event occurs (can add multiple event listeners per HTML element). takes 2 main parameters:event: click, change, mouseover, …function callWe compare JavaScript events Shiny observeEvent listening specific user input:","code":"<button id=\"mybutton\">Go!<\/button>const btn = document.getElementById('mybutton');btn.addEventListener('click', function() {\n  alert('Thanks!');\n});\nobserveEvent(trigger, {\n  # instructions\n})\n"},{"path":"survival-kit-javascript.html","id":"jquery","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5 jQuery","text":"","code":""},{"path":"survival-kit-javascript.html","id":"introduction-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.1 Introduction","text":"jQuery famous JavaScript library providing user friendly interface manipulate DOM present almost actual websites. slightly easier (understand convenient use) vanilla JS, even though web developers tend avoid go back vanilla JS (Bootstrap 5, next iteration Bootstrap rely jQuery anymore). use jQuery web page, must include code either downloading code putting minified JS file HTML setting link CDN:","code":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Including jQuery<\/title>\n    <!-- How to include jQuery -->\n    <script src=\"https://code.jquery.com/jquery-3.5.0.js\"><\/script>\n  <\/head>\n  <body>\n   \n    <p>Hello World<\/p>\n  \n  <script>\n    $('p').css('color', 'red');\n  <\/script>\n   \n  <\/body>\n<\/html>"},{"path":"survival-kit-javascript.html","id":"syntax","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.2 Syntax","text":"minimal jQuery code representing philosophy (“write less, .”):selector slot stands jQuery selector like class, id, element, [attribute], :input (select input elements) many . reminder, let’s consider following example:select interact element, use JavaScript jQuery:course possible chain selectors:","code":"$(selector).action();<p class=\"text\">Hello World<\/p>let inner = document.getElementsByClassName('text').innerHTML; // vanilla JS\nlet inner = $('.text').html(); // jQuery<ul class=\"list\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\" id=\"precious-item\">4<\/li>\n<\/ul>\n\n<ul class=\"list\" id=\"list2\">\n  <li class=\"item\">1<\/li>\n  <li class=\"item\">2<\/li>\n  <li class=\"item\">3<\/li>\n  <li class=\"item\">4<\/li>\n<\/ul>let items = $('.list .item'); // will return an array containing 8 li tags\nlet otherItems = $('#list2 .item'); // will select only li tags from the second ul element\nlet lists = $('ul'); // will return an array with 2 ul elements\nlet firstItem = $('#list2:first-child'); // will return the first li element of the second ul."},{"path":"survival-kit-javascript.html","id":"useful-functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.3 Useful functions","text":"exist filtering functions dedicated simplify item selection. list containing mostly used Shiny.","code":""},{"path":"survival-kit-javascript.html","id":"travel-in-the-dom","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.3.1 Travel in the DOM","text":"","code":""},{"path":"survival-kit-javascript.html","id":"manipulate-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.3.2 Manipulate tags","text":"list main jQuery methods manipulate tags (adding class, css property…): add methods","code":""},{"path":"survival-kit-javascript.html","id":"chaining-jquery-methods","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.4 Chaining jQuery methods","text":"lot jQuery methods may chained, like pipe operations R.end chain ; step indented 2 spaces right direction:","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n  <li>Item 3<\/li>\n  <li>Item 4<\/li>\n  <li>Item 5<\/li>\n<\/ul>$('ul')\n  .first()\n  .css('color', 'green') // add some style with css\n  .attr('id', 'myAwesomeItem') // add an id attribute\n  .addClass('amazing-ul');"},{"path":"survival-kit-javascript.html","id":"iterations-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.5 Iterations","text":"Like vanilla JavaScript, possible iterations jQuery. Let’s consider following HTML elements:apply method change style matched element step step:Notice following code $('li').css('visibility', 'hidden'); exactly ! explained implicit iteration process handled jQuery methods.map methods different purpose. creates new object based provided one.","code":"<ul>\n  <li>Item 1<\/li>\n  <li>Item 2<\/li>\n<\/ul>$('li').each(function() {\n  $(this).css('visibility', 'hidden'); // will hide all li items\n});const items = [0, 1, 2, 3, 4, 5];\nconst threshold = 3;\n\nlet filteredItems = $.map(items, function(i) {\n  // removes all items > threshold\n  if (i > threshold) \n    return null;\n  return i;\n});"},{"path":"survival-kit-javascript.html","id":"good-practice","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.6 Good practice","text":"recommended wrap jQuery code follows:Indeed, guess happen try modify element even exist? code make sure document ready starting jQuery manipulation.","code":"$(document).ready(function(){\n  // your code\n});\n\n// or a shortcut\n\n$(function() {\n  // your code\n});"},{"path":"survival-kit-javascript.html","id":"events","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.7 Events","text":"jQuery exists significant number methods related events. popular:.event frequently used Shiny since allows pass custom events part JS predefined events. instance {shinydashboard} (Chang Borges Ribeiro 2018) relies specific HTML/JavaScript/CSS template including homemade API handling dashboard events. Don’t worry section clear moment. see practical examples following chapters.","code":"$(element).click(); // click event\n$(element).change(); // trigger change on an element\n$(element).on('click', function() {\n // whatever\n}); // attach an event handler function. Here we add click for the example\n$(element).one('click', function() {\n // whatever\n}); // the difference with on is that one will trigger only once\n$(element).resize(); // useful to trigger plot resize in Shiny so that they correctly fit their container\n$(element).trigger('change') // similar to $(element).change(); You will find it in the Shiny core."},{"path":"survival-kit-javascript.html","id":"extending-objects","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.5.8 Extending objects","text":"last feature need mention jQuery ability extend objects additional properties /method.vanilla JS use Object.defineProperty:","code":"// jQuery way\n$(function() {\n  let object1 = { apple: 0 };\n  $.extend(object1, {\n    print: function() {\n      console.log(this);\n    }\n  });\n  object1.print();\n});// pure JavaScript\nObject.defineProperty(object1, 'print', {\n  value: function() {\n    console.log(this);\n  },\n  writable: false\n});"},{"path":"survival-kit-javascript.html","id":"shiny-js-inspector","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.6 Shiny, JavaScript and the HTML inspector","text":"part gave elementary JS knowledge. section comes back main point book, Shiny. describe leverage developer tools test,run debug JavaScript code related Shiny app.","code":""},{"path":"survival-kit-javascript.html","id":"the-console-panel","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.6.1 The console panel","text":"developing JS code, often put console.log(var) calls track content given variable check code supposed . resulting messages, errors warnings printing console, also called Real-eval-print loop (REPL) suitable experiment practice new JS/jQuery skills.","code":""},{"path":"survival-kit-javascript.html","id":"a-real-repl","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.6.1.1 A real REPL","text":"warm , run shiny app open Chrome DevTools. Notice 2 Console tabs (next Elements bottom), depicted Figure 6.5. prefer using bottom one still see Elements tab preview DOM modifications real time.\nFIGURE 6.5: Console panel DevTools\nInterestingly, may access element contained window. Copy paste $(\"body\").addClass(\"plop\"); prompt. Notice happens Elements tab.","code":"\nui <- fluidPage()\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n"},{"path":"survival-kit-javascript.html","id":"track-errors-and-warnings","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.6.1.2 Track errors and warnings","text":"discussed earlier book, lot Shiny app issues Stack Overflow RStudio community easily solved quickly inspecting console.","code":""},{"path":"survival-kit-javascript.html","id":"debug-shinyjs-code-with-the-inspector","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.6.2 Debug Shiny/JS code with the inspector","text":"debug Shiny apps inspector, scripts folder accessible app like www/ folder using shiny::addResourcePath. Moreover,\nminified files, must source maps, allow reconstruct original scripts, minification process. instance, Shiny shiny.min.js.map. practice, R packages bundling HTML templates ship files since quite large (see package size restriction CRAN). framework7 HTML template, top built {shinyMobile} [R-shinyMobile] source maps size can reach 5MB obviously big include R package.following, consider simple shiny app deployed shinyapps.io, notification displayed JavaScript soon user clicks action button. also made typos code goal find fix .Browse appOpen Chrome DevToolsClick action button (pretty sure clicked step 2 ;))expected shown Figure 6.6, console displays \nerror message: Uncaught TypeError: read property 'show' undefined. Sounds good isn’t ?\nFIGURE 6.6: Error console panel\nExpand error message show stack trace. see error occurred onclick event calling sendNotif function. Interestingly, can open file clicking provided link (notif.js:2). get layout similar Figure 6.7, depending screen width.\nFIGURE 6.7: Inspect source causing error\nLet’s briefly describe Figure 6.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Let’s briefly describe Figure 6.7. left side, can navigate files accessible web server, shiny internal resources, shiny external dependencies (like Bootstrap 3) well scripts. app deployed shinyapps.io, scripts located folder starting _w_, corresponds shinyapps.io workerId (detail important understand. See ). central part contains opened script like classic IDE. right side displays debugging tools may trigger clicking corresponding accordion. scope shows variables/object values break point, watch allows track specific elements Event listener Breakpoints allows stop given listener type. create new “watcher” entering typeof message clicking add icon check message type within sendNotif function. Watched expressions saved close browser.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 6.8. According results, nothing seems wrong function arguments.Put break point line 2 clicking left side center panel click action button trigger break point. also additionally set 2 Watch Expressions (message duration) type string number, respectively, depicted Figure 6.8. According results, nothing seems wrong function arguments.\nFIGURE 6.8: Inspection scope breakpoint\nerror message Uncaught TypeError: read property 'show' undefined actually means notification exist. Try typing Shiny.notification console. ’ll get undefined. Instead, console suggests\nShiny.notifications. Let’s replace wrong code notif.js script save .\nClick “Resume script execution” blue button (top left right panel). Notice notification displayed error thrown.Congrats! ’ve just debugged first shiny app web inspector. practice, code probably much complex example workflow remains .","code":""},{"path":"survival-kit-javascript.html","id":"exercises-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.7 Exercises","text":"JavaScript console REPL, JavaScript exercises may done inside, except exercise 3 also involves HTML. case, reader may browse jsfiddle.","code":""},{"path":"survival-kit-javascript.html","id":"exercise-1-define-variables","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.7.1 Exercise 1: define variables","text":"Play example ","code":"let myNumber = 1; // affectation\nmyNumber--; // decrement\nconsole.log(myNumber); // print 0"},{"path":"survival-kit-javascript.html","id":"exercise-2-define-objects","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.7.2 Exercise 2: define objects","text":"object skeleton.Fill random values.Access name property.Create printAge method, returns age. Hint: refers object . instance .name gives name property.","code":"const me = {\n  name : ,\n  age : ,\n  music : ,\n  printName: function() {\n    console.log(`I am ${}`);\n  }\n}"},{"path":"survival-kit-javascript.html","id":"exercise-3-jquery","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.7.3 Exercise 3: jQuery","text":"JSFiddle allows insert HTML, CSS JavaScript test\ncode, share . also require specific configuration machine focus testing!Go JSFiddleInsert following HTML code chunk HTML sub-window.basic HTML skeletonIn JavaScript windows, select jQuery 3.4.1 dropdown menu (3.4.1? latest Shiny release relies version. therefore best practice ensure dependencies similar, least major version).Since best practice run jQuery code document ready (avoiding target non existing elements), wrap JS code following:Create event listener change third item color soon one click .\nHint 1: select specific item may use $(selector:eq()) index element. Keep mind JavaScript starts 0 1 like R!\nHint 2: reminder, create event listener jQuery, use following pattern.","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <ul>\n      <li>Item 1<\/li>\n      <li>Item 2<\/li>\n      <li>Item 3<\/li>\n      <li>Item 4<\/li>\n      <li>Item 5<\/li>\n    <\/ul>\n  <\/body>\n<\/html>$(function() {\n  // your code\n});\n\n// or a more explicit syntax\n$(document).ready(function() {\n  // code\n});$(\"selector\").on(\"event_name\", function(e) {\n  // your logic\n});"},{"path":"survival-kit-javascript.html","id":"exercise-4-a-pure-js-action-button","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"6.7.4 Exercise 4: a pure JS action button","text":"another example button element attached event listener. Clicking button increment value 1. Fill blanks!","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <button>click<\/button>\n  <\/body>\n<\/html>$(function() {\n    \n  // recover the button inner html\n  const btnText = ...;\n\n    // event listener for button element\n    $(...).click(function() {\n    var val = ...;\n    // (1) increment button \n    // (2) add the button value to the inner text\n    ...\n    \n    // show alert given condition\n    if (val > 3) {\n      // do whatever you want\n        ...\n    }\n  });\n  \n});"},{"path":"shiny-intro.html","id":"shiny-intro","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7 Shiny’s internal: session and websockets","text":"chapter, answer following question:R/JavaScript communication achieved?point, users may find options(shiny.minified = FALSE) debug Shiny.js core.","code":""},{"path":"shiny-intro.html","id":"shiny-websocket","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1 Websocket: R/JS bidirectional communication","text":"R (server) JavaScript (client) communicate? built-Shiny feature highlighted , leverages httpuv package. going let’s define websocket! advanced technology allowing bidirectional communication (multiple) client(s) server. instance, chat system may built top websocket.3 server created {httpuv} (Cheng Chang 2020) client {websocket} (Chang, Cheng, Dipert, et al. 2020) directly JavaScript, described :server side, startServer expects host, port app. case websockets, app list containing onWSOpen function defining actions perform connection established. actions defined {httpuv} WebSocket R6 class:onMessage invoked whenever message received connection.onClose invoked connection closed.send sends message server (client).client, may use {websocket} WebSocket class provided websocket package. soon new socket instance created, server onWSOpen function called displays welcome message. message sent client, received server sent back client.Note client might also built directly JS , actually shiny :host port must identical server client side!open file web browser, clicking button send message server, shown Figure 7.1.\nFIGURE 7.1: Server client communication\nreader must understand Shiny input/output modified client end user, lot exchanges R JS, websocket. following, briefly describe Shiny leverages technology, server client side.","code":"\nlibrary(httpuv)\n# set the server\ns <- startServer(\"127.0.0.1\", 8080,\n  list(\n    onWSOpen = function(ws) {\n      # The ws object is a WebSocket object\n      cat(\"Server connection opened.\\n\")\n      \n      ws$onMessage(function(binary, message) {\n        cat(\"Server received message:\", message, \"\\n\")\n        ws$send(\"Hello client!\")\n      })\n      ws$onClose(function() {\n        cat(\"Server connection closed.\\n\")\n      })\n    }\n  )\n)\n\nlibrary(websocket)\n# set the client\nws <- websocket::WebSocket$new(\"ws://127.0.0.1:8080/\")\nws$onMessage(function(event) {\n  cat(\"Client received message:\", event$data, \"\\n\")\n})\n\n# Wait for a moment before running next line\nws$send(\"Hello server!\")\n\n# Close client\nws$close()\n<!DOCTYPE HTML>\n<html lang=\"en\">\n  <head>\n    <script language=\"javascript\">\n      // displays an alert \n      var mySocket = new WebSocket(\"ws://127.0.0.1:8080\");\n      mySocket.onopen = function (event) {\n        // exampleSocket.send(\"Client connected!\"); \n      };\n      mySocket.onmessage = function (event) {\n        console.log(event.data);\n      };\n    <\/script>\n    <title>Websocket Example<\/title>\n  <\/head>\n  <body>\n    <!-- onclick attributes applies the JavaScript function changeColor define above -->\n    <button onclick=\"mySocket.send('Hello server!')\">Say hello to the server<\/button>\n  <\/body>\n<\/html>"},{"path":"shiny-intro.html","id":"shiny-websocket-server-side","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1.1 Shiny: websocket server side","text":"","code":""},{"path":"shiny-intro.html","id":"websocket-creation","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1.1.1 Websocket creation","text":"server, R, websocket initiated startApp function, leveraging {httpuv} package. short, shiny app object composed modified {httpuv} compatible app.\nWebsocket handlers defined handlerManager$addWSHandler(appHandlers$ws, \"/\", tail = TRUE).Note R option options(shiny.trace = TRUE) allows websocket messages displayed directly R console.","code":"\n# see middleware.R\nhttpuvApp <- handlerManager$createHttpuvApp()\n\nonWSOpen = function(ws) {\n  return(wsHandlers$invoke(ws))\n}\n\naddWSHandler = function(wsHandler, key, tail = FALSE) {\n  wsHandlers$add(wsHandler, key, tail)\n}\n\n# server.R (line 281-290)\nws$onMessage(function(binary, msg) {\n  # If unhandled errors occur, make sure they get properly logged\n  withLogErrors(messageHandler(binary, msg))\n})\n\n# Message is first decoded -> See decodeMessage(msg)\n\n# Given a unique shinysession, messageHandler has 2 cases: init and update. This depends on the msg$method value. \n# When init, input are managed before observers run. On update, we wait for observers to run before. See shinysession$manageInputs(msg$data, now = TRUE) below. \n\n# shinysession$manageInputs(msg$data, now = TRUE)\n# Set the normal and client data input variables. Normally, managing\n# inputs doesn't take immediate effect when there are observers that\n# are pending execution or currently executing (including having\n# started async operations that have yielded control, but not yet\n# completed). The `now` argument can force this\n\nmanageInputs = function(data, now = FALSE) {\n  # ... normal inputs are located in private\n}\n\nws$onClose(function() {\n  shinysession$wsClosed()\n  appsByToken$remove(shinysession$token)\n  appsNeedingFlush$remove(shinysession$token)\n})\n"},{"path":"shiny-intro.html","id":"shiny-session","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1.1.2 The Shiny session object","text":"won’t able go anywhere without giving reminders Shiny session object. say object? session actually instance ShinySession R6 class.\ninitialization takes one parameter, namely websocket. shown last section, websocket allows bidirectional exchanges R JS. Understanding R JS communicate allows us discuss Shiny input system.sendCustomMessage sends messages R JS. calls private sendMessage method calls write. message sent session opened, websocket private$websocket$send(json). shiny.trace option TRUE, message showing sent JSON displayed, useful debugging.sendInputMessage used update inputs server. message stored message queue ultimately sent websocket private$websocket$send(json).code extracted shiny.R file.worry clear moment. discuss elements following sections.","code":"\nsendCustomMessage = function(type, message) {\n  data <- list()\n  data[[type]] <- message\n  private$sendMessage(custom = data)\n}\n\nsendInputMessage = function(inputId, message) {\n  data <- list(id = inputId, message = message)\n  \n  # Add to input message queue\n  private$inputMessageQueue[[length(private$inputMessageQueue) + 1]] <- data\n  # Needed so that Shiny knows to actually flush the input message queue\n  self$requestFlush()\n}\n\n\nsendMessage = function(...) {\n  # This function is a wrapper for $write\n  msg <- list(...)\n  if (anyUnnamed(msg)) {\n    stop(\"All arguments to sendMessage must be named.\")\n  }\n  private$write(toJSON(msg))\n}\n\n\nwrite = function(json) {\n  if (self$closed){\n    return()\n  }\n  traceOption <- getOption('shiny.trace', FALSE)\n  if (isTRUE(traceOption) || traceOption == \"send\")\n    message('SEND ',\n            gsub('(?m)base64,[a-zA-Z0-9+/=]+','[base64 data]',json,perl=TRUE))\n  private$websocket$send(json)\n}\n# ...\n"},{"path":"shiny-intro.html","id":"shiny-websocket-client-side","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1.2 Shiny: Websocket client side","text":"JS side, socket creation occurs shinyapps.js file:WebSocket object. protocol chosen protocol (either ws wss using https). window.location.host contains host name port.\nconnection opened, events handled onopen event registry:shiny:connected event triggered, disconnected overlay (famous grayed screen) removed DOM. Initial input values sent server via send method. onmessage registry aims handling messages received server.subsequently invokes dispatchMessage method sends message handlers (_sendMessagesToHandlers), triggering shiny:message event. Shiny internal custom provided handlers (understand user-defined) stored separate arrays. time, message type matches handler, treated. instance, dedicated internal handler input messages, bridges gap given input corresponding input binding. handler eventually triggers inputBinding.receiveMessage method input value updated client.Finally onclose method called websocket connection closed.connection open, shiny:disconnected event triggered. , disconnect overlay added DOM (grayed screen) socket removed.","code":"var ws = new WebSocket(protocol + '//' + window.location.host + defaultPath);socket.onopen = function() {\n  hasOpened = true;\n\n  $(document).trigger({\n    type: 'shiny:connected',\n    socket: socket\n  });\n\n  self.onConnected(); // remove overlay\n\n  socket.send(JSON.stringify({\n    method: 'init',\n    data: self.$initialInput\n  }));\n\n  while (self.$pendingMessages.length) {\n    var msg = self.$pendingMessages.shift();\n    socket.send(msg);\n  }\n}socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};socket.onclose = function() {\n      // These things are needed only if we've successfully opened the\n      // websocket.\n  if (hasOpened) {\n    $(document).trigger({\n      type: 'shiny:disconnected',\n      socket: socket\n    });\n\n    self.$notifyDisconnected();\n  }\n\n  self.onDisconnected(); // Must be run before self.$removeSocket()\n  self.$removeSocket();\n}"},{"path":"shiny-intro.html","id":"example","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.1.3 Example","text":"following, show inspect websocket web browser. Let’s run following app (see 7.2, left panel)opening HTML inspector, select network tab search websocket list. choosing message tab, may inspect R JavaScript say others. stated , first message sent contains initial input values. Shiny recalculates table, notify recalculation done becomes idle. second message received R updating select input, triggers event cycle.Although complex, extremely useful check whether input / output communication working properly. , see error field identifying issue.Shiny.shinyapp.$socket.readyState returns state socket connection. 1 app running. instances socket closed, error raised.\nFIGURE 7.2: Shiny websocket\nsee can even bypass UI element update input value directly via websocket using Shiny.shinyapp.$sendMsg update method.","code":"\nlibrary(shiny)\nshinyApp(\n  ui = fluidPage(\n    selectInput(\"variable\", \"Variable:\",\n                c(\"Cylinders\" = \"cyl\",\n                  \"Transmission\" = \"am\",\n                  \"Gears\" = \"gear\")),\n    tableOutput(\"data\")\n  ),\n  server = function(input, output) {\n    output$data <- renderTable({\n      mtcars[, c(\"mpg\", input$variable), drop = FALSE]\n    }, rownames = TRUE)\n  }\n)\n\nupdateObsVal <- function(value) {\n  sprintf(\n    \"Shiny.shinyapp.$sendMsg(JSON.stringify({\n      method: 'update',\n      data: {obs: %s}\n    }));\",\n    value\n  )\n}\n\n# below we shunt the slider input by sending message\n# directly through the websocket\n\nui <- fluidPage(\n  tags$button(\n    \"Update obs value\",\n    onclick = updateObsVal(4)\n  ),\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"shiny-intro.html","id":"shiny-js-object","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"7.2 The Shiny JavaScript object","text":"Shiny object exported top shiny.js file.4 words, means may use object properties within HTML inspector console tab, JavaScript file shiny app .object contains many properties methods shown Figure 7.3. particular interest, like Shiny.setInputValue, Shiny.addCustomMessageHandler, Shiny.shinyapps, Shiny.bindAll, … detailed later.\nFIGURE 7.3: Shiny JavaScript object\n","code":"\nui <- fluidPage(\n  tags$script(\n    \"$(function() {\n      console.log(Shiny);\n    });\n    \"\n  )\n)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)\n"},{"path":"shiny-input-system.html","id":"shiny-input-system","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8 Shiny’s input system","text":"Shiny inputs key elements Shiny apps since way end-user interact app. may know sliderInput, numericInput, checkboxInput sometimes may need fancier elements like knobInput shinyWidgets, depicted Figure 8.1 even sophisticated inputs like smartSelect shinyMobile (Figure 8.1, right panel). ever wondered mechanisms behind inputs? ever dreamt develop ?goal section understand Shiny inputs work create new ones.\nFIGURE 8.1: Custom shiny inputs. left: knobInput shinyWidgets; right: smart select shinyMobile\n","code":""},{"path":"shiny-input-system.html","id":"input-bindings","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1 Input bindings","text":"run app, time works just fine! question , inputs (outputs) handled allow happen? Upon initialization, Shiny runs several JavaScript functions. accessible programmer (see usecase ). illustrate , let’s run app .open HTML inspector run Shiny.unbindAll(document) (document scope, search). Try change slider input. notice nothing happens. Now let’s type Shiny.bindAll(document) update slider value. Moving slider successfully update plot. Magic isn’t ? simply shows inputs bound, nothing happens binding inputs necessary.consider another example multiple inputs.Let’s see input binding works.","code":"\nlibrary(shiny)\nui <- fluidPage(\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\n\nui <- fluidPage(\n  actionButton(\"unbind\", \"Unbind inputs\", onclick = \"Shiny.unbindAll();\"),\n  actionButton(\"bind\", \"Bind inputs\", onclick = \"Shiny.bindAll();\"),\n  lapply(1:3, function(i) {\n    textInput(paste0(\"text_\", i), paste(\"Text\", i))\n  }),\n  lapply(1:3, function(i) {\n    uiOutput(paste0(\"val_\", i))\n  })\n)\n\nserver <- function(input, output, session) {\n  lapply(1:3, function(i) {\n    output[[paste0(\"val_\", i)]] <- renderPrint(input[[paste0(\"text_\", i)]])\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"shiny-input-system.html","id":"input-structure","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.1 Input structure","text":"input element given <input> tag well several attributes.id guarantees input uniqueness. see soon instances input share unique input binding, therefore id mandatory.typeclass targeted CSS JavaScriptvalue holds input value","code":"<input id = inputId type = \"text\" class = \"input-text\" value = value>"},{"path":"shiny-input-system.html","id":"binding-shiny-inputs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2 Binding Shiny inputs","text":"input binding allows Shiny identify instance given input may input. instance, slider input must update whenever range dragged left right arrows keyboard pressed. relies class defined input_binding.js file.Let’s describe method chronologically. better convenience, book side package contains step step demonstrations may found . example called customTextInputExample, takes input binding step parameter. instance customTextInputExample(1) invoke first step.","code":""},{"path":"shiny-input-system.html","id":"find-the-input","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.1 Find the input","text":"first step, critical locate input DOM. R side, define input, specific attribute serve receptor binding. inputs, may handled type attribute. cases, may class, like actionButton. JS side, need method identify receptor. Moreover, two different types inputs (instance radioButton selectInput) receptor conflict reasons, whereas two instances input type can (app contains 10 sliders, share input binding!). receptor identifier provided find method InputBinding class. method must applied scope, document. find accepts valid jQuery selector. Note console.log debugging purpose.Figure 8.2 summarizes important step.\nFIGURE 8.2: find inputs?\n, going create new binding textInput, two methods mentioned previous section, find getValue. , need create customized text input, customTextInput make unique. now add input-text class make input binding pointing specific class.last part code contains tagList two elements:element input bindingThe input tagBelow example managed dependency creation side package.\nConsidering multiple inputs, add script dependency passing vector script parameter.shinyMobile package, chose robust approach. bindings contained folder compressed generate one minified file containing collapsed bindings.Figure 8.3 shows main elements textInput widget. code, shinyInputLabel Shiny internal function creates numeric input label, word text displayed next . core input element wrapped tags$input. worry structure seems unclear, give details shiny tags Chapter 3.\nFIGURE 8.3: Shiny’s textInput elements\ninvite reader run first example open HTML inspector look console.log result.Results shown Figure 8.4. corresponding input found, see corresponding tag element HTML inspector console.\nFIGURE 8.4: find method output\n","code":"find: function(scope) {\n  console.log($(scope).find('.input-text'));\n  return $(scope).find('.input-text');\n}\ncustomTextInput <- function (inputId, label, value = \"\", width = NULL, placeholder = NULL) {\n  \n  # this external wrapper ensure to control the input width\n  div(\n    class = \"form-group shiny-input-container\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    },\n    # input label\n    shinyInputLabel(inputId, label), \n    \n    # input element + JS dependencies\n    tagList(\n      customTextInputDeps(),\n      tags$input(\n        id = inputId,\n        type = \"text\",\n        class = \"form-control input-text\",\n        value = value,\n        placeholder = placeholder\n      )\n    )\n  )\n}\n\ncustomTextInputDeps <- function() {\n  htmlDependency(\n    name = \"customTextBindings\",\n    version = \"1.0.0\",\n    src = c(file = system.file(\"chapter5/input-bindings\", package = \"OSUICode\")),\n    script = \"customTextInputBinding.js\"\n  )\n}\n\ncustomTextInputExample(1)\n"},{"path":"shiny-input-system.html","id":"initialize-inputs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.2 Initialize inputs","text":"Upon initialization, Shiny calls initializeInputs function takes input bindings call initialize method binding inputs. Note input initialized _shiny_initialized tag avoid initializing twice. initialize method always defined elements require explicitly initialized activated. instance Framework7 API, top shinyMobile built, require instantiate elements. example toggle input:el: '.toggle' means looking element(s) toggle class. app.toggle.create internal Framework7 API. corresponding shinyMobile input binding starts follows.initialized, may use specific methods provided API. Framework7 clearly gold mine, API provides many possible options many inputs / widgets.","code":"// what is expected\nlet toggle = app.toggle.create({\n  el: '.toggle',\n  on: {\n    change: function () {\n      console.log('Toggle changed')\n    }\n  }\n});var f7ToggleBinding = new Shiny.InputBinding();\n  $.extend(f7ToggleBinding, {\n    initialize: function(el) {\n      app.toggle.create({el: el});\n    },\n    // other methods\n});"},{"path":"shiny-input-system.html","id":"get-the-value","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.3 Get the value","text":"getValue(el) returns input value. way obtain value different almost inputs. instance, textInput pretty simple since value located value attribute. el refers element holding id attribute recognized find method. Figure 8.5 shows result console.log($(el));.\nFIGURE 8.5: el\nget value, apply jQuery method val $(el) element return result.time, input value returned. Notice try change text content, output value update normally expect. actually missing couple methods binding fully working. introduce following sections!","code":"getValue: function(el) {\n  console.log($(el));\n  return $(el).val();\n}\ncustomTextInputExample(2)\n"},{"path":"shiny-input-system.html","id":"set-and-update","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.4 Set and update","text":"setValue(el, value) used set value current input. method necessary input value may updated. used combination receiveMessage(el, data), JavaScript part R updateInput functions. usually call setValue method inside.Let’s create function update custom text input. Call updateCustomTextInput. requires least 3 parameters:inputId tells input update.value new value. taken setValue JS method input bindingsession Shiny session object mentioned earlier. use sendInputMessage send values R JavaScript. receiveMessage method apply setValue data received R.add setValue receiveMessage custom input binding.Figure 8.6 illustrates main mechanisms.\nFIGURE 8.6: Events following click update button. figure demonstrates R JS communicate, websocket.\npass multiple elements update, change updateCustomTextInput function :dropNulls internal function ensuring list contain NULL elements. send list R, serialized JSON object. receiveMessage method, properties like value may accessed using . notation:far good! managed update text input value. Yet, clicking button, output value change. going fix missing step next section.","code":"setValue: function(el, value) {\n  $(el).val(value);\n}\nupdateCustomTextInput <- function(inputId, value = NULL, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = value)\n}\n\nupdateCustomTextInputExample(3)\n\nupdateCustomTextInput <- function(inputId, value = NULL, placeholder = NULL, session = getDefaultReactiveDomain()) {\n  message <- dropNulls(\n    list(\n      value = value,\n      placeholder = placeholder\n    )\n  )\n  session$sendInputMessage(inputId, message)\n}\nreceiveMessage: function(el, data) {\n  console.log(data);\n  if (data.hasOwnProperty('value')) {\n    this.setValue(el, data.value);\n  }\n  // other parameters to update...\n}"},{"path":"shiny-input-system.html","id":"subscribe","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.5 Subscribe","text":"subscribe(el, callback) listens events defining Shiny update input value make available app. API like Bootstrap explicitly mention events (like hide.bs.tab, shown.bs.tab, …).\nGoing back custom text input, event make change?key release keyboard. may listen keyupAfter copying pasting text input field dictating text. input event may helpfulWe may add events binding using event listener seen end Chapter 6.callback ensures new value captured Shiny. come back later callback parameter.Hooray! output result successfully changed input value manually updated. However, nothing happens click update button. miss? Looking back receiveMessage method, changed input value Shiny knows step successful? check event raised, put console.log(event); subscribe method. action like removing text content adding new text triggers event clicking action button . Therefore, must trigger event add subscribe method. may choose change event, triggers element updated.Let’s try .Perfect? exactly.","code":"$(el).on('keyup.customTextBinding input.customTextBinding', function(event) {\n  callback(true);\n});\nupdateCustomTextInputExample(4)\n$(el).on('change.customTextBinding', function(event) {\n  callback(false);\n});\nupdateCustomTextInputExample(5)\n"},{"path":"shiny-input-system.html","id":"setting-rate-policies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.6 Setting rate policies","text":"better change input value keyboard completely released time (time key released). call debouncing, allows delay telling Shiny read new value, achieved using getRatePolicy method. Additionally, must also pass true callback subscribe method, order apply specific rate policy (debounce, throttle). useful instance don’t want flood server useless update requests. example using slider, want send value soon range stops moving intermediate values. elements defined .Run app try manually change text input value adding couple letters fast can. notice? see output value updates release keyboard.may adjust delay according needs, caution set delay long becomes problematic .","code":"\ncustomTextInputExample(6)\n"},{"path":"shiny-input-system.html","id":"register-an-input-binding","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.2.7 Register an input binding","text":"end input binding definition, register Shiny.Although Shiny documentation mentions Shiny.inputBindings.setPriority method handle conflicting bindings, case almost never happens.","code":"let myBinding = new Shiny.inputBinding();\n  $.extend(myBinding, {\n  // methods go here\n});\n\nShiny.inputBindings.register(myBinding, 'reference');"},{"path":"shiny-input-system.html","id":"edit-an-input-binding","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.3 Edit an input binding","text":"cases, like access input binding change ’s default behavior, even though always recommended, since affect related inputs. bindings contained registry, namely Shiny.inputBindings, one may seamlessly access modify . 5 steps process:Wait shiny:connected eventUnbind inputs Shiny.unbindAll()Access binding registry, Shiny.inputBindingsExtend binding edit content $.extend(... {...})Apply new changes Shiny.bindAll()","code":"$(function() {\n  $(document).on('shiny:connected', function(event) {\n    Shiny.unbindAll();\n    $.extend(Shiny\n      .inputBindings\n      .bindingNames['shiny.actionButtonInput']\n      .binding, {\n        // do whathever you want to edit existing methods\n      });\n    Shiny.bindAll();\n  });\n});"},{"path":"shiny-input-system.html","id":"update-a-binding-from-the-client","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.1.4 Update a binding from the client","text":"interest receiveMessage setValue able update input\nserver side, R, session$sendInputMessage. Yet,\ntask might done directly client, thereby lowering load server.\nconsider following example: shiny app contains 2 actions buttons, clicking first one\nincreases value second 10. won’t possible classic approach since button click\nincreases 1. proceed?first set event listener first button.target second button get input binding $obj.data('shiny-input-binding')recover current valueWe call setValue method input binding adding 10 current valueImportantly, let Shiny update value R side, must trigger event detected subscribe method action button input binding. action button 1 event listener may added. Don’t forget triggering click event also increment button value 1! following customize subscribe method work aroundIf click second button, value increments 1 plot visible 10 clicks, 1 click necessary first button. reset button resets second action button value 0. implements feature discussed previous part, extend button binding add reset method edit subscribe method add change event listener, simply telling shiny get new value. Contrary click, change increment button value.working app.trick extensively used virtual physiology simulator trigger animations.","code":"$(function() {\n  // each time we click on #test (a button)\n  $('#button1').on('click', function() {\n    var $obj = $('#button2');\n    var inputBinding = $obj.data('shiny-input-binding');\n    var val = $obj.data('val') || 0;\n    inputBinding.setValue($obj, val + 10);\n    $obj.trigger('event');\n  });\n});$.extend(Shiny.inputBindings.bindingNames['shiny.actionButtonInput'].binding, {\n  reset: function(el) {\n   $(el).data('val', 0);\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click.actionButtonInputBinding', function(e) {\n      var $el = $(this);\n      var val = $el.data('val') || 0;\n      $el.data('val', val + 1);\n\n      callback();\n    });\n            \n    // this does not trigger any click and won't change the button value            \n    $(el).on('change.actionButtonInputBinding', function(e) {\n      callback();\n    });\n  }\n});\nui <- fluidPage(\n  tags$head(\n    tags$script(\n      [1417 chars quoted with '\"']\n    )\n  ),\n  actionButton(\"button1\", icon(\"plus\")),\n  actionButton(\"button2\", uiOutput(\"val\")),\n  actionButton(\"reset\", icon(\"undo\")),\n  plotOutput(\"plot\")\n)\n\nserver <- function(input, output) {\n  output$val <- renderUI({\n    paste(\"Value: \", input$button2)\n  })\n  \n  output$plot <- renderPlot({\n    validate(need(input$button2 >= 10, message = \"Only visible after 10 clicks on the second button\"))\n    hist(rnorm(100))\n  })\n  \n  observeEvent(input$button2, {\n    if (input$button2 == 0) {\n      showNotification(\n        \"Button successfuly reset\",\n        type = \"warning\"\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"shiny-input-system.html","id":"examples","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.2 Examples","text":"","code":""},{"path":"shiny-input-system.html","id":"shinydashboard-boxes-on-steroids","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.2.1 {shinydashboard} boxes on steroids","text":"Shiny input binding system convenient used input elements. {shinydashboard}, may know box function. Boxes containers title, body, footer, well optional elements. nice capture state box input, trigger actions soon input changes. Since input value unique, must add inputId parameter box function. may inspect code .Since may collapse uncollapse box, create updateBox2 function, toggle :collapsed, box gets collapsed-box class. Note: useful input binding. mentioned , also necessary know tell Shiny update value subscribe method. time, change event might sufficient, shinydashboard built top AdminLTE2, API control box behavior. identify 2 events corresponding collapsible action:expanded.boxwidget (Triggered box expanded)collapsed.boxwidget (Triggered box collapsed)Unfortunately, investigations, events possible use since AdminLTE code trigger main JS code (see collapse method line 577-612). solutions, shown click event. toggle box, use toggleBox method.comments binding:getValue returns object give list R. case add elements like remove action available AdminLTEsetValue calls plug play toggleBox methodreceiveMessage must trigger change event Shiny knows value needs updatedsubscribe listens click event [data-widget=\"collapse\"] element delays callback call value slightly higher default AdminLTE2 animation collapse box (500mx). omit part, input time properly update!!!don’t need extra listener updateBox2 function since also triggers click collapse button, thereby forwarding corresponding listenerLet’s try new toy simple dashboard:Even though animations nice, appears rather sub-optimal wait 500 ms box collapse. AdminLTE options allow change $.AdminLTE.boxWidget object. specify animationSpeed property 10 milliseconds update input binding script reduce delay subscribe method (50 ms seems reasonable). get comparison try run example .","code":"\nupdateBox2 <- function(inputId, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = NULL)\n}\nlet boxBinding = new Shiny.InputBinding();\n$.extend(boxBinding, {\n  find: function(scope) {\n    return $(scope).find('.box');\n  },\n  getValue: function(el) {\n    let isCollapsed = $(el).hasClass('collapsed-box')\n    return {collapsed: isCollapsed}; // this will be a list in R\n  },\n  setValue: function(el, value) {\n    $(el).toggleBox();\n  }, \n  receiveMessage: function(el, data) {\n    this.setValue(el, data);\n    $(el).trigger('change');\n  },\n  subscribe: function(el, callback) {\n    $(el).on('click', '[data-widget=\"collapse\"]', function(event) {\n      setTimeout(function() {\n        callback();\n      }, 550);\n    }); \n    \n    $(el).on('change', function(event) {\n      setTimeout(function() {\n        callback();\n      }, 550);\n    });\n  },\n  unsubscribe: function(el) {\n    $(el).off('.boxBinding');\n  }\n});\n\nShiny.inputBindings.register(boxBinding, 'box-input');\nui <- fluidPage(\n  # import shinydashboard deps without the need of the dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  box2(\n   title = textOutput(\"box_state\"),\n   \"Box body\",\n   inputId = \"mybox\",\n   collapsible = TRUE,\n   plotOutput(\"plot\")\n  ),\n  actionButton(\"toggle_box\", \"Toggle Box\", class = \"bg-success\")\n )\n\n server <- function(input, output, session) {\n  output$plot <- renderPlot({\n    req(!input$mybox$collapsed)\n    plot(rnorm(200))\n  })\n\n  output$box_state <- renderText({\n    state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n    paste(\"My box is\", state)\n  })\n\n  observeEvent(input$toggle_box, {\n    updateBox2(\"mybox\")\n  })\n\n }\n\n shinyApp(ui, server)\n\n# You'll need the devel version of shinydashboardPlus\n#remotes::install_github(\"RinteRface/shinydashboardPlus\")\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(shinydashboardPlus)\n \n ui <- dashboardPage(\n   dashboardHeader(),\n   dashboardSidebar(),\n   dashboardBody(\n     tags$style(\"body { background-color: ghostwhite}\"),\n     actionButton(\"toggle_box\", \"Toggle Box\"),\n     br(),\n     box(\n       title = textOutput(\"box_state\"),\n       \"Box body\",\n       inputId = \"mybox\",\n       collapsible = TRUE,\n       closable = TRUE,\n       plotOutput(\"plot\")\n     )\n   )\n )\n \n server <- function(input, output, session) {\n   output$plot <- renderPlot({\n     req(!input$mybox$collapsed)\n     plot(rnorm(200))\n   })\n   \n   output$box_state <- renderText({\n     state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n     paste(\"My box is\", state)\n   })\n   \n   observeEvent(input$toggle_box, {\n     updateBox(\"mybox\", action = \"toggle\")\n   })\n   \n   \n   observeEvent(input$mybox$collapsed, {\n     collapsed <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n     message <- paste(\"My box is\", collapsed)\n     showNotification(message, type = \"warning\", duration = 1)\n   })\n   \n }\n \n shinyApp(ui, server)\n"},{"path":"shiny-input-system.html","id":"going-further","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.2.2 Going further","text":"may imagine leveraging input binding system update box property get rid classic renderUI approach. Indeed, now, one way update box server:whole piece UI re-rendered time, box class modified. much impact complex app festooned inputs/outputs, overall user experience may altered., proceed 2 steps. first part consists customizing box function gather many parameter possible option list. instance, choose extract background, width title. width background expected numeric character, respectively, title might HTML tag, justifying use .character.properties list treated JS side. , must make accessible within box2\nHTML tag. choose following approach, convert properties JSON jsonlite::toJSON embed script tag. Note data-attribute unique id parameter. guarantee uniqueness configuration script., update updateBox2 handles toggle update possibilities. options contains updatable properties like background, title width.\ndon’t describe toggle case since quite similar previous implementations. action update, enter statement options must processed. option element shiny tag list shiny tag (tagList), convert character. returned message vector containing action well option list.JS side, modify setValue method import newly defined properties. boxTag two children, box configuration script. $(el) refers box, therefore look one level able use find method (find always goes deeper DOM), namely $(el).parent(). , target script tag $(el).parent().find(\"script[data-='\" + el.id + \"']\"). captured variable, parse corresponding element convert objects can manipulate: instance config.width returns initial width. value.options.width contain new width value provided updateBox2 message output. Good practice check whether value.options.width exists value.options.hasOwnProperty(\"width\"). yes ensure whether value config.width different. always choose === compares type value (== compares value \"1\" == 1 true). call internal method _updateWidth defined input binding. 3 parameters, el, o n (o n old new values, respectively):must trigger resize event output correctly scale. internal method identified underscore since inherited Shiny.InputBinding method.finally update config value newly set value repeat process property.represents significant amount work, also guarantee lower load server side.careful . Indeed, called event listener, refers element triggered event input binding object!","code":"\nui <- fluidPage(\n  # import shinydashboard deps without the need of the dashboard template\n  useShinydashboard(),\n\n  tags$style(\"body { background-color: ghostwhite};\"),\n\n  br(),\n  uiOutput(\"custom_box\"),\n  selectInput(\"background\", \"Background\", choices = shinydashboard:::validColors)\n )\n\n server <- function(input, output, session) {\n  output$custom_box <- renderUI({\n    box2(\n      title = \"Box\",\n      \"Box body\",\n      background = input$background\n    )\n  })\n }\n\n shinyApp(ui, server)\n\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  props <- dropNulls(\n    list(\n      title = as.character(title),\n      background = background,\n      width = width\n    )\n  )\n  \n  # I removed some of the code to highlight that part\n}\n\nbox2 <- function(..., id = NULL, title = NULL, footer = NULL,\n                 background = NULL, width = 6, height = NULL,\n                 collapsible = FALSE, collapsed = FALSE) {\n  \n  # code not shown\n  \n  boxTag <- shiny::tags$div(\n    class = if (!is.null(width)) paste0(\"col-sm-\", width), \n    shiny::tags$div(\n      id = id,\n      class = boxClass, \n      headerTag, \n      shiny::tags$div(\n        class = \"box-body\", \n        style = style,\n        ...,\n        sidebar[c(1, 3)],\n      ), \n      if (!is.null(footer)) shiny::tags$div(\n        class = if (isTRUE(footerPadding)) \"box-footer\" else \"box-footer no-padding\", footer)\n    ),\n    \n    # this will make our props accessible from JS\n    shiny::tags$script(\n      type = \"application/json\",\n      `data-for` = id,\n      jsonlite::toJSON(\n        x = props,\n        auto_unbox = TRUE,\n        json_verbatim = TRUE\n      )\n    )\n  )\n  \n  boxTag\n  \n}\n\nupdateBox2 <- function(id, action = c(\"toggle\", \"update\"), options = NULL,\n                      session = getDefaultReactiveDomain()) {\n  # for update, we take a list of options\n  if (action == \"update\") {\n    # handle case whare options are shiny tag or a list of tags ...\n    options <- lapply(options, function(o) {\n      if (inherits(o, \"shiny.tag\") || inherits(o, \"shiny.tag.list\")) {\n        o <- as.character(o)\n      }\n      o\n    })\n    message <- dropNulls(c(action = action, options = options))\n    session$sendInputMessage(id, message)\n  } else {\n    session$sendInputMessage(id, message = action)\n  }\n}\n_updateWidth: function(el, o, n) {\n  // removes old class\n  $(el).parent().toggleClass(\"col-sm-\" + o);\n  $(el).parent().addClass(\"col-sm-\" + n); \n  // trigger resize so that output resize\n  $(el).trigger('resize');\n}setValue: function(el, value) {\n  var config = $(el).parent().find(\"script[data-for='\" + el.id + \"']\");\n  config = JSON.parse(config.html());\n  \n  // JS logic\n  if (value.action === \"update\") {\n    if (value.options.hasOwnProperty(\"width\")) {\n      if (value.options.width !== config.width) {\n        this._updateWidth(el, config.width, value.options.width)\n        config.width = value.options.width;\n      }\n    }\n    // other items to update\n  } else {\n    // other tasks\n  }\n  \n}"},{"path":"shiny-input-system.html","id":"utilities-to-quickly-define-new-inputs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.3 Utilities to quickly define new inputs","text":"","code":""},{"path":"shiny-input-system.html","id":"introduction-2","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.3.1 Introduction","text":"ever wondered Shiny.onInputChange Shiny.setInputValue comes (see article), actually defined initShiny function.Briefly, function avoids creating input binding. faster code price pay: losing ability easily update new input. Indeed, input functions like sliderInput update function like updateSliderInput, custom input binding system (see soon)!","code":"exports.setInputValue = exports.onInputChange = function(name, value, opts) {\n  opts = addDefaultInputOpts(opts);\n  inputs.setInput(name, value, opts);\n};"},{"path":"shiny-input-system.html","id":"examples-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.3.2 Examples","text":"Shiny.setInputValues becomes powerful combined numerous Shiny JavaScript events listed . \nuse shinyMobile package store current device information shiny input.\nBriefly, Framework7 (top built shinyMobile) method Framework7.device, gives many details related user device.allows conditionally display elements deeply customize interface.\nexample , card show mobile devices.","code":"$(document).on('shiny:connected', function(event) {\n  Shiny.setInputValue('deviceInfo', Framework7.device);\n});\nlibrary(shinyMobile)\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"shinyMobile info\",\n        hairline = FALSE,\n        shadow = TRUE\n      ),\n      # main content\n      uiOutput(\"card\"),\n      verbatimTextOutput(\"info\"),\n    )\n  ),\n  server = function(input, output, session) {\n    \n    output$info <- renderPrint(input$shinyInfo)\n\n    # generate a card only for desktop\n    output$card <- renderUI({\n      if (!input$deviceInfo$desktop) {\n        f7Card(\n          \"This is a simple card with plain text,\n          but cards can also contain their own header,\n          footer, list view, image, or any other element.\"\n        )\n      } else {\n        f7Toast(\n          session, \n          \"You are on desktop! The card will not display\", \n          position = \"center\"\n        )\n      }\n    })\n  }\n)\n"},{"path":"shiny-input-system.html","id":"custom-data-format","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"8.3.3 Custom data format","text":"cases, automatic Shiny R JS data management may meet needs. instance, assume create date JS new Date() store shiny input Shiny.setInputValue. R side, obtain date character, convenient. input handlers useful since allow manipulate data generated JS side injecting R. handlers created shiny::registerInputHandler takes 2 parameters:type allows connect handler Shiny.setInputValue. Note id followed handler type, instance Shiny.setInputValue('test:handler', ...) connected shiny::registerInputHandler('handler', ...)function transform data, data main parameterBelow exceptionally include JS code directly shiny app snippet, best practice convenient demonstration. second input give correct result.","code":"\n# You must click on the window to create inputs!!\nregisterInputHandler(\"textDate\", function(data, ...) {\n  if (is.null(data)) {\n    NULL\n  } else {\n    res <- try(as.Date(unlist(data)), silent = TRUE)\n    if (\"try-error\" %in% class(res)) {\n      warning(\"Failed to parse dates!\")\n      # as.Date(NA)\n      data\n    } else {\n      res\n    }\n  }\n}, force = TRUE)\n\nui <- fluidPage(\n  tags$script(\n    \"$(function(){\n      $(window).on('click', function() {\n        var currentTime = new Date();\n        Shiny.setInputValue('time1', currentTime);\n        Shiny.setInputValue('time2:textDate', currentTime);\n      });\n    });\n    \"\n  ),\n  verbatimTextOutput(\"res1\"),\n  verbatimTextOutput(\"res2\")\n)\n\nserver <- function(input, output, session) {\n  output$res1 <- renderPrint(list(class(input$time1), input$time1))\n  output$res2 <- renderPrint(list(class(input$time2), input$time2))\n}\n\nshinyApp(ui, server)\n"},{"path":"shiny-input-lifecycle.html","id":"shiny-input-lifecycle","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"9 Shiny inputs lifecycles","text":"following, recap everything see chapter 7.","code":""},{"path":"shiny-input-lifecycle.html","id":"app-initialization","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"9.1 App initialization","text":"\nFIGURE 9.1: Shiny client side initialization\nshiny apps starts, Shiny runs initShiny client. function 3 main tasks:Bind inputs outputs _bindAll().Initialize inputs (necessary) initializeInputs.Initialize client websocket connection mentioned previous chapter 7 send initial values server.input bindings principle bundled {shiny} package. may user-defined like {shinyMobile} even simple shiny app. case,\ncontained binding registry, namely inputBindings built top following class (apply output bindings):class method register binding. one call Shiny.inputBindings.register(myBinding, 'reference');, appends newly created binding bindings array.shiny starts, find defined bindings getBindings method.\ndone, binding, find triggered. corresponding element found DOM, nothing done. found input, following methods triggered:getId (described ) returns input id. ensures uniqueness critical!getType optionally handles registerInputHandler defined user R side.getValue gets initial input value.subscribe registers event listeners driving input behavior.data attribute shiny-input-binding added. allows shiny end-users access input binding methods client (practice, end-users ). shiny-bound-input class added, corresponding input appended boundInputs object (listing bound inputs) shiny:bound triggered client.done, shiny stores initial values variable initialInput, also containing client data pass Shinyapp.connect method. shown 7, latter opens client websocket connection, raises shiny:connected event send values server (R). time , shiny:sessioninitialized triggered.chapter 7, briefly described shiny JavaScript object. exercise, let’s explore Shiny.shinyApp object contains. definition located shinyapps.js script.creates several properties, easy guess like inputValues initialInput. Let’s run example open HTML inspector. Notice sliderInput set 500 t0 (initialization).Figure 9.2 shows access Shiny’s initial input value Shiny.shinyapp.$initialInput.obs. changing slider position, value given Shiny.shinyapp.$inputValues.obs. $initialInput $inputValues contains many elements, however interested slider function example.\nFIGURE 9.2: Explore initial input values\n","code":"var BindingRegistry = function() {\n  this.bindings = [];\n  this.bindingNames = {};\n}var ShinyApp = function() {\n  this.$socket = null;\n  \n  // Cached input values\n  this.$inputValues = {};\n  \n  // Input values at initialization (and reconnect)\n  this.$initialInput = {};\n  \n  // Output bindings\n  this.$bindings = {};\n  \n  // Cached values/errors\n  this.$values = {};\n  this.$errors = {};\n  \n  // Conditional bindings (show/hide element based on expression)\n  this.$conditionals = {};\n  \n  this.$pendingMessages = [];\n  this.$activeRequests = {};\n  this.$nextRequestId = 0;\n  \n  this.$allowReconnect = false;\n};\nui <- fluidPage(\n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\")\n)\n\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\n"},{"path":"shiny-input-lifecycle.html","id":"update-input","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"9.2 Update input","text":"try explain mechanisms update input server client. stated , starts update<name>Input function call, actually sends message current session. message received client websocket message manager:sends message appropriate handler, inputMessages:short, get inputId access corresponding input binding. triggers shiny:updateinput event call input binding receiveMessage method. fires setValue subscribe.\nway subscribe works really well covered official documentation.\ncallback function actually defined initialization process:valueChangeCallback ultimately calls inputs.setInput(id, value, opts). latters involves rather complex chain reactions (described ). Overall, result stored queue, namely pendingData sent server shinyapp.sendInput:message update tag sent client websocket, connection opened. , added list pending messages.Finally, current inputValues updated. server side, new value received\nserver websocket message handler, ws$onMessage(message).\nFIGURE 9.3: Shiny client side initialization\n","code":"socket.onmessage = function(e) {\n  self.dispatchMessage(e.data);\n};addMessageHandler('inputMessages', function(message) {\n  // inputMessages should be an array\n  for (var i = 0; i < message.length; i++) {\n    var $obj = $('.shiny-bound-input#' + $escape(message[i].id));\n    var inputBinding = $obj.data('shiny-input-binding');\n\n    // Dispatch the message to the appropriate input object\n    if ($obj.length > 0) {\n      var el = $obj[0];\n      var evt = jQuery.Event('shiny:updateinput');\n      evt.message = message[i].message;\n      evt.binding = inputBinding;\n      $(el).trigger(evt);\n      if (!evt.isDefaultPrevented())\n        inputBinding.receiveMessage(el, evt.message);\n    }\n  }\n});function valueChangeCallback(binding, el, allowDeferred) {\n  var id = binding.getId(el);\n  if (id) {\n    var value = binding.getValue(el);\n    var type = binding.getType(el);\n    if (type)\n      id = id + \":\" + type;\n\n    let opts = {\n      priority: allowDeferred ? \"deferred\" : \"immediate\",\n      binding: binding,\n      el: el\n    };\n    inputs.setInput(id, value, opts);\n  }\n}this.sendInput = function(values) {\n  var msg = JSON.stringify({\n    method: 'update',\n    data: values\n  });\n\n  this.$sendMsg(msg);\n    \n  $.extend(this.$inputValues, values);\n  // other things ...\n}this.$sendMsg = function(msg) {\n  if (!this.$socket.readyState) {\n    this.$pendingMessages.push(msg);\n  }\n  else {\n    this.$socket.send(msg);\n  }\n};"},{"path":"shiny-input-gems.html","id":"shiny-input-gems","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10 Hidden gems about inputs","text":"present tools may useful…FINISH","code":""},{"path":"shiny-input-gems.html","id":"get-the-last-changed-input","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10.1 Get the last changed input","text":"","code":""},{"path":"shiny-input-gems.html","id":"motivations","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10.1.1 Motivations","text":"probably question one day: can get last changed input Shiny? already methods like one provided Dean Attali.Shouldn’t easier? client instead, thereby reducing server load?","code":"\nrunApp(\n  shinyApp(\n    ui = shinyUI(\n      fluidPage(\n        textInput('txt_a', 'Input Text A'),\n        textInput('txt_b', 'Input Text B'),\n        uiOutput('txt_c_out'),\n        verbatimTextOutput(\"show_last\")\n      )\n    ),\n    server = function(input, output, session) {\n      output$txt_c_out <- renderUI({\n        textInput('txt_c', 'Input Text C')\n      })\n      \n      values <- reactiveValues(\n        lastUpdated = NULL\n      )\n      \n      observe({\n        lapply(names(input), function(x) {\n          observe({\n            input[[x]]\n            values$lastUpdated <- x\n          })\n        })\n      })\n      \n      output$show_last <- renderPrint({\n        values$lastUpdated\n      })\n    }\n  )\n)\n"},{"path":"shiny-input-gems.html","id":"javascript-my-friend","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10.1.2 JavaScript, my friend","text":"comes friend, JavaScript. insert snippet head app, able get last changed input (name, value type).use code custom shiny template, possible input bindings don’t name, thereby make event.binding.name.split('.')[1] crash event.binding undefined. , may remove part:","code":"$(document).on('shiny:inputchanged', function(event) {\n  Shiny.setInputValue('pleaseStayHome', {name: event.name, value: event.value, type: event.binding.name.split('.')[1]});\n});$(document).on('shiny:inputchanged', function(event) {\n  Shiny.setInputValue('pleaseStayHome', {name: event.name, value: event.value});\n});"},{"path":"shiny-input-gems.html","id":"example-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10.1.3 Example","text":"{shinyMobile} natively implements feature may accessed input$lastInputChanged.approach advantage overload server part complex logic.","code":"\nlibrary(shinyMobile)\nshinyApp(\n  ui = f7Page(\n    title = \"My app\",\n    f7SingleLayout(\n      navbar = f7Navbar(\n        title = \"Single Layout\",\n        hairline = FALSE,\n        shadow = TRUE\n      ),\n      toolbar = f7Toolbar(\n        position = \"bottom\",\n        f7Link(label = \"Link 1\", src = \"https://www.google.com\"),\n        f7Link(label = \"Link 2\", src = \"https://www.google.com\", external = TRUE)\n      ),\n      # main content,\n      f7Card(\n        f7Text(inputId = \"text\", label = \"Text\"),\n        f7Slider(inputId = \"range1\", label = \"Range\", min = 0, max = 2, value = 1, step = 0.1),\n        f7Stepper(inputId = \"stepper1\", label = \"Stepper\", min = 0, max = 10, value = 5),\n        verbatimTextOutput(\"lastChanged\")\n      )\n    )\n  ),\n  server = function(input, output) {\n    output$lastChanged <- renderPrint(input$lastInputChanged)\n  }\n)\n"},{"path":"shiny-input-gems.html","id":"about-shinylogs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"10.1.4 About {shinylogs}","text":"{shinylogs} package developed dreamRs contains feature much advanced options.","code":"\nlibrary(shinylogs)\n\nshinyApp(\n  ui = fluidPage(\n    numericInput(\"n\", \"n\", 1),\n    sliderInput(\"s\", \"s\", min = 0, max = 10, value = 5),\n    verbatimTextOutput(\"lastChanged\")\n  ),\n  server = function(input, output, session) {\n    # specific to shinylogs\n    track_usage(storage_mode = store_null())\n    output$lastChanged <- renderPrint(input$`.shinylogs_lastInput`)\n  }\n)\n"},{"path":"shiny-custom-handler.html","id":"shiny-custom-handler","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"11 Custom handlers: from R to JavaScript","text":"Shiny provides tools ease communication R JavaScript, illustrated section 7.1. R send messages JavaScript?already discussed usage sendInputMessage() input binding section 8. important method sendCustomMessage(type, message). works pair JS method Shiny.AddCustomMessageHandler, linked type parameter.JavaScript receptor defined :shiny app simply print welcome message every 5 seconds. obviously set options(shiny.trace = TRUE). Figure 11.1 summarizes main mechanisms involved R JS communication. corresponding code may found .find whole chapter dedicated custom handlers 17.\nFIGURE 11.1: R JavaScript\nCombining Shiny.setInputValue, Shiny.addCustomMessageHandler, fun example\nsets body background result simple button click.\ndefined 3 JS pieces:getPokemon whose script adapted Colin Fay et al. (see ). function fetch pokeapi\ndata successful set input value, available R sideAn event listener set button page time click,\ncall getPokemon select random background imageinput$pokeData actually quite complex list (deeply nested JSON) manipulation done R observeEvent block. done, send data\nback JS websocket (session object sends message).JS side, last block custom message handler add inline\nCSS properties body element","code":"\nsay_hello_to_js <- function(text, session = getDefaultReactiveDomain()) {\n  session$sendCustomMessage(type = 'say-hello', message = text)\n}\n$(function() {\n  Shiny.AddCustomMessageHandler('say-hello', function(message) {\n    alert(`R says ${message} to you!`)\n  });\n});\nshinyAppDir(system.file(\"chapter6/say_hello\", package = \"OSUICode\"))\n\nlibrary(shiny)\n\nui <- fluidPage(\n  tags$script(\n    HTML(\n      [1165 chars quoted with '\"']\n    )\n  ),\n  tags$button(id = \"button\", \"Go!\", class = \"btn-success\")\n)\n\nserver <- function(input, output, session) {\n  \n  observeEvent(input$pokeData, {\n    background <- input$pokeData$sprites$other$`official-artwork`$front_default\n    message(background)\n    session$sendCustomMessage(type = \"update_background\", message = background)\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"custom-templates-selection.html","id":"custom-templates-selection","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"12 Template selection","text":"numerous HTML templates web. However, may suitable shiny.shiny built top Bootstrap 3 (HTML, CSS Javascript framework), changing framework trivial endeavor. However, shinymaterial shiny.semantic good examples show possible.shiny relies jQuery (currently v 3.4.1 shiny). Consequently, templates based upon React, Vue Javascript framework natively supported. , exist examples React shiny generally,\nreactR package developed Kent Russell Alan Dipert RStudio.See github repository details dependencies related shiny package.Notes: shiny depends Bootstrap 3.4.1, recommend user interested experimenting Bootstrap 4 consciously aware potential incompatibilities. See working example bs4Dash.good source open source HTML templates Colorlib Creative Tim.next chapter, focus tabler.io dashboard template (See Figure 12.1).\nFIGURE 12.1: Tabler dashboard overview\n","code":""},{"path":"custom-templates-dependencies.html","id":"custom-templates-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"13 Define dependencies","text":"Tabler template tiny Bootstrap 4 dashboard template. chapter, describe customize Tabler providing R wrapper. way, underlying JavaScript code left untouched yet able incorporate greater functionality.","code":""},{"path":"custom-templates-dependencies.html","id":"discover-the-project","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"13.1 Discover the project","text":"first step template adaptation consists exploring underlying Github repository (open source) look mandatory elements, like CSS/JS dependencies. similar strategy want incorporate htmlWidget well.\nFIGURE 13.1: Github project exploration\nshown Figure 13.1, important folders :dist: contains CSS JS files well libraries like Bootstrap jQuery. also good moment look version dependency might conflict Shinydemo website folder used demonstration purpose. source explore template capabilities depthThe scss build folder may used customize tabler template directly. However stated , directions scope book.","code":""},{"path":"custom-templates-dependencies.html","id":"identify-mandatory-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"13.2 Identify mandatory dependencies","text":"Bootstrap 4, jQuery, tabler.min.css tabler.min.js key elements template, contrary flag icons optional (take lot space). goal release template CRAN, mindful 5 Mb maximum size limit. personal experience, can attest quite challenging manage.inspect dependencies, proceed followsDownload clone Github repositoryGo demo folder open layout-dark.html fileOpen HTML inspectorAs depicted Figure ?? left-hand side, need include tabler.min.css header. convinced, try remove DOM see happens. jqvmap actually related external visualization plugin used demo. Finally demo.min.css file demo purpose. prevent template working, skip now. far good, need one file thus!JavaScript dependencies shown right-hand side located end body tag. need chart-related dependencies like apexcharts, jquery.vmap vmap world may safely ignore . keep Bootstrap 4 bundle.js, jQuery core tabler.min.js (order crucial).","code":""},{"path":"custom-templates-dependencies.html","id":"bundle-dependencies","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"13.3 Bundle dependencies","text":"help htmltoolsDependency function, going create main Tabler HTML dependency containing assets allow template render properly. example, going cheat bit: instead handling local files, use CDN (content delivery network) hosts necessary Tabler assets. avoids include necessary files R package, well github repository.advise reader create one HTML dependency per element. Bootstrap version v4.3.1 (Shiny relies 3.4.1) jQuery 3.5.0 (Shiny relies 3.4.1). can also use CDN:finally create dependency manager:Notice dependencies order deps list: exactly order head HTML page. libraries require loaded specific place, like Tabler dependencies must come Bootstrap.\nsurprising since Tabler built top Bootstrap 4.Let’s see use add_tabler_deps. consider <div> placeholder check dependencies findDependencies (NULL). , wrap add_tabler_deps.shown , dependencies applied div, correct order. order set list list(bs4_deps, jQuery_deps, tablers_deps) allows use avoid potential conflicts. try run simple tag shiny app, notice dependencies added <head> tag, whereas original template loads JavaScript dependencies <body>. Unfortunately, htmltools allow developers distribute dependencies different places. impact templates like Framework7 (powering shinyMobile), JavaScript must place body. practice, challenging guess may solved manual testing.Even though add_tabler_deps function may applied tag, use core HTML template, remain designed!like see dependency system works? Let’s meet next chapter design main dashboard layout.","code":"\ntablers_deps <- htmlDependency(\n  name = \"tabler\",\n  version = \"1.0.7\", # we take that of tabler,\n  src = c(href = \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"),\n  script = \"js/tabler.min.js\",\n  stylesheet = \"css/tabler.min.css\"\n)\n\nbs4_deps <- htmlDependency(\n  name = \"Bootstrap\",\n  version = \"4.3.1\",\n  src = c(href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"),\n  script = \"bootstrap.bundle.min.js\"\n)\n\njQuery_deps <- htmlDependency(\n  name = \"jquery\",\n  version = \"3.5.0\",\n  src = c(href = \"https://code.jquery.com/\"),\n  script = \"jquery-3.5.0.slim.min.js\"\n)\n\n# add all dependencies to a tag. Don't forget to set append to TRUE to preserve any existing dependency\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps)\n  attachDependencies(tag, deps, append = TRUE)\n}\n\ntag <- div()\nfindDependencies(tag)\n## NULL\ntag <- add_tabler_deps(div())\nfindDependencies(tag)\n## [[1]]\n## List of 10\n##  $ name      : chr \"Bootstrap\"\n##  $ version   : chr \"4.3.1\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/\"\n##  $ meta      : NULL\n##  $ script    : chr \"bootstrap.bundle.min.js\"\n##  $ stylesheet: NULL\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\n## \n## [[2]]\n## List of 10\n##  $ name      : chr \"tabler\"\n##  $ version   : chr \"1.0.7\"\n##  $ src       :List of 1\n##   ..$ href: chr \"https://cdn.jsdelivr.net/npm/tabler@1.0.0-alpha.7/dist/\"\n##  $ meta      : NULL\n##  $ script    : chr \"js/tabler.min.js\"\n##  $ stylesheet: chr \"css/tabler.min.css\"\n##  $ head      : NULL\n##  $ attachment: NULL\n##  $ package   : NULL\n##  $ all_files : logi TRUE\n##  - attr(*, \"class\")= chr \"html_dependency\"\nui <- fluidPage(tag)\nserver <- function(input, output, session) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"custom-templates-skeleton","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14 Template skeleton","text":"list available layouts quite impressive (horizontal, vertical, compressed, right left, dark, …). next steps, focus dark-compressed template. leave reader try templates exercise.","code":""},{"path":"custom-templates-skeleton.html","id":"identify-template-elements","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.1 Identify template elements","text":"quite lucky since nothing fancy tabler layout. usual, let’s inspect layout-condensed-dark.html (tabler /demo folder) Figure 14.1\nFIGURE 14.1: Tabler condensed layout\n2 main components:\n- header containing brand logo, navigation dropdown\n- content containing dashboard body well footerSomething important: dashboard body mean <body> tag!!","code":""},{"path":"custom-templates-skeleton.html","id":"design-the-page-layout","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2 Design the page layout","text":"","code":""},{"path":"custom-templates-skeleton.html","id":"the-page-wrapper","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.1 The page wrapper","text":"remember structure basic html page seen Chapter 1.2? Well, , reminder.actually don’t need include <html> tag since shiny automatically . construct list tags tagList, including head body. head meta tags multiple purposes:describe encoding,display app different devices. instance apple-mobile-web-app-status-bar-style iOS devices mobile support.Set favicon, icon representing website icon, one may see right side searchbar. Try twitter instance.page title favicon may changed developer, may included parameters function. remember, also CSS head nothing ! Actually, insertion dependencies achieved addDeps function defined Chapter 13. Tabler comes 2 main themes, namely white dark, may applied <body> class attribute (respectively “antialiased theme-dark” “antialiased”). … parameter contain template elements like header dashboard body, remain created. shown Figure 12.1 Chapter 12, tabler dashboard template may contain navigation bar footer. mandatory, create dedicated parameters pass elements …slot.quickly test tabler element renders well confirms setup adequate. , include random tabler element taken demo html page, using HTML. Let’s clear: avoid much possible using HTML security issues. also checks basic Shiny input/output system works expected sliderInput linked plot output.Ok, info card shiny element work like charm, good start. Now may focus aesthetics.","code":"<!DOCTYPE HTML>\n<html>\n  <head>\n  <!-- head content here -->\n  <\/head>\n  <body>\n    <p>Hello World<\/p>\n  <\/body>\n<\/html>\ntabler_page <- function(..., dark = TRUE, title = NULL, favicon = NULL){\n  \n  # head\n  head_tag <- tags$head(\n    tags$meta(charset = \"utf-8\"),\n    tags$meta(\n      name = \"viewport\", \n      content = \"\n        width=device-width, \n        initial-scale=1, \n        viewport-fit=cover\"\n    ),\n    tags$meta(`http-equiv` = \"X-UA-Compatible\", content = \"ie=edge\"),\n    tags$title(title),\n    tags$link(\n      rel = \"preconnect\", \n      href = \"https://fonts.gstatic.com/\", \n      crossorigin = NA\n    ),\n    tags$meta(name = \"msapplication-TileColor\", content = \"#206bc4\"),\n    tags$meta(name = \"theme-color\", content = \"#206bc4\"),\n    tags$meta(name = \"apple-mobile-web-app-status-bar-style\", content = \"black-translucent\"),\n    tags$meta(name = \"apple-mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"mobile-web-app-capable\", content = \"yes\"),\n    tags$meta(name = \"HandheldFriendly\", content = \"True\"),\n    tags$meta(name = \"MobileOptimized\", content = \"320\"),\n    tags$meta(name = \"robots\", content = \"noindex,nofollow,noarchive\"),\n    tags$link(rel = \"icon\", href = favicon, type = \"image/x-icon\"),\n    tags$link(rel = \"shortcut icon\", href = favicon, type=\"image/x-icon\")\n  )\n  \n  # body\n  body_tag <- tags$body(\n    tags$div(\n      class = paste0(\"antialiased \", if(dark) \"theme-dark\"),\n      style = \"display: block;\",\n      tags$div(class = \"page\", ...)\n    )\n  ) %>% add_tabler_deps()\n  \n  tagList(head_tag, body_tag)\n}\n\n#thematic_on()\n#onStop(thematic_off)\nui <- tabler_page(\n  \"test\", \n  sliderInput(\"obs\", \"Number of observations:\",\n              min = 0, max = 1000, value = 500\n  ),\n  plotOutput(\"distPlot\"),\n  br(),\n  HTML(\n    [1883 chars quoted with ''']\n  ),\ntitle = \"Tabler test\"\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"the-body-content","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.2 The body content","text":"part, translate dashboard body HTML code R. reminder, html2r Alan Dipert substantially speeds conversion process. copy code HTML text area, click convert get R shiny output. create function called tabler_body. … parameter holds dashboard body elements footer dedicated future tabler_footer function.Let’s test previous example.Way better!","code":"\ntabler_body <- function(..., footer = NULL) {\n  div(\n    class = \"content\",\n    div(class = \"container-xl\", ...),\n    tags$footer(class = \"footer footer-transparent\", footer)\n  )\n}\n\nui <- tabler_page(tabler_body(h1(\"Hello World\")))\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"the-footer","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.3 The footer","text":"footer composed left right containers. decide create parameters left right user able pass elements.class attributes taken original HTML template. already familiar Bootstrap 4, may easily customize style. short, row means elements aligned row, text-center amd align-items-center handle text content centering. flex-row-reverse display elements reversed order. Notice also row element contains columns created col class. Bootstrap grid system relies Flexible Box Module, also known flexbox., let’s check brand new element.","code":"\ntabler_footer <- function(left = NULL, right = NULL) {\n  div(\n    class = \"container\",\n    div(\n      class = \"row text-center align-items-center flex-row-reverse\",\n      div(class = \"col-lg-auto ml-lg-auto\", right),\n      div(class = \"col-12 col-lg-auto mt-3 mt-lg-0\", left)\n    )\n  )\n}\n\nui <- tabler_page(\n  tabler_body(\n    p(\"Hello World\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"the-navbar-or-header","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.4 The navbar (or header)","text":"function called tabler_header. Tabler template, header navbar navbar-expand-md navbar-light classes. don’t need navbar-light class since interested dark theme. shown Figure 14.2, navbar composed 4 elements:navbar toggler visible reduce screen width, like mobile devicesthe brand imagethe navigationthe dropdown menus (mandatory)\nFIGURE 14.2: Tabler header structure\nmay look Bootstrap 4 documentation extra configuration layout.element considered input parameter tabler_navbar function, except navbar toggler default element must removed. Morever, show brand element provided. … parameter slot extra elements (menu dropdowns). following, start creating main container, header_tag unique child container_tag. latter 4 children toggler_tag, brand_tag, dropdown_tag navmenu_tag. situations, {htmltools} functions like tagAppendChild tagAppendChildren game changers better organize code make maintainable. One never knows advance much extra feature added component. Hence cautious beginning crucial!navbar menu main component navbar. … parameter slot menu items. Compared original tabler dashboard template class navbar-nav, add least, nav class make sure items correctly activated/inactivated. nav-pills class select pills instead basic tabs (see ), nothing cosmetic consideration. Notice ul tag contain li elements, navbar items.Besides, navbar menu item either simple button contain multiple menu sub-items. now, focus simple items.","code":"\ntabler_navbar <- function(..., brand_url = NULL, brand_image = NULL, nav_menu, nav_right = NULL) {\n  \n  header_tag <- tags$header(class = \"navbar navbar-expand-md\")\n  container_tag <- tags$div(class = \"container-xl\")\n  \n  # toggler for small devices (must not be removed)\n  toggler_tag <- tags$button(\n    class = \"navbar-toggler\", \n    type = \"button\", \n    `data-toggle` = \"collapse\", \n    `data-target` = \"#navbar-menu\",\n    span(class = \"navbar-toggler-icon\")\n  )\n  \n  # brand elements\n  brand_tag <- if (!is.null(brand_url) || !is.null(brand_image)) {\n    a(\n      href = if (!is.null(brand_url)) {\n        brand_url\n      } else {\n        \"#\"\n      },\n      class = \"navbar-brand navbar-brand-autodark d-none-navbar-horizontal pr-0 pr-md-3\",\n      if(!is.null(brand_image)) {\n        img(\n          src = brand_image, \n          alt = \"brand Image\",\n          class = \"navbar-brand-image\"\n        )\n      }\n    )\n  }\n  \n  dropdown_tag <- if (!is.null(nav_right)) {\n    div(class = \"navbar-nav flex-row order-md-last\", nav_right)\n  }\n  \n  navmenu_tag <- div(\n    class = \"collapse navbar-collapse\", \n    id = \"navbar-menu\",\n    div(\n      class = \"d-flex flex-column flex-md-row flex-fill align-items-stretch align-items-md-center\",\n      nav_menu\n    ),\n    if (length(list(...)) > 0) {\n      div(\n        class = \"ml-md-auto pl-md-4 py-2 py-md-0 mr-md-4 order-first order-md-last flex-grow-1 flex-md-grow-0\", \n        ...\n      )\n    }\n  )\n  \n  container_tag <- container_tag %>% tagAppendChildren(\n    toggler_tag,\n    brand_tag,\n    dropdown_tag,\n    navmenu_tag\n  )\n  \n  header_tag %>% tagAppendChild(container_tag)\n  \n}\n\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\n"},{"path":"custom-templates-skeleton.html","id":"navbar-navigation","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.4.1 Navbar navigation","text":"navbar extremely important since drive navigation template. like associate item separate page body content. allow us go new page time change item. brief, similar Shiny tabsetPanel function.HTML, menu items <> tags (links) given href attribute pointing specific page located server files. point Shiny app can’t decide split content several pages. app.R generating simple HTML page. strategy create tabbed navigation, mimic multiple pages.Let’s see tabset navigation works. menu list, items must :data-toggle attribute set taban href attribute holding unique id. unique id mandatory since point menu item corresponding body content.body side, tab panels contained tabset panel (simple div container), role attribute set tabpanel id corresponding href passed menu item. exact match id href mandatory, shown Figure 14.3.\nFIGURE 14.3: Tabler tabset main principle\n, propose possible implementation menu item, well corresponding body tab panel. text parameter corresponds nav item text displayed menu. also added optional icon ability select item start.also decided add fade transition effect tabs, per Bootstrap 4 documentation.testing shiny app?point might argue even validated template elements. instance, going back tabler_navbar_menu_item function, find following possible issues:happens user provides invalid tabName, ie text valid jQuery like tab&?++?happens user accidentally activates 2 tabs start?see later Chapter 15 validate parameter.","code":"\ntabler_navbar_menu_item <- function(text, tabName, icon = NULL, selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      href = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\", # see https://getbootstrap.com/docs/4.0/components/navs/\n      `data-value` = tabName,\n      role = \"tab\",\n      span(class = \"nav-link-icon d-md-none d-lg-inline-block\", icon),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}\n\ntabler_tab_items <- function(...) {\n  div(class = \"tab-content\", ...)\n}\n\ntabler_tab_item <- function(tabName = NULL, ...) {\n  div(\n    role = \"tabpanel\",\n    class = \"tab-pane fade container-fluid\",\n    id = tabName,\n    ...\n  )\n}\n\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        p(\"Hello World\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"fine-tune-tabs-behavior","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.4.2 Fine tune tabs behavior","text":"Quite good isn’t ? notice however even first tab selected default, content shown. fix , apply jQuery skills. According Bootstrap documentation, must trigger show event active tab start, well add classes show active associated tab panel dashboard body. therefore target nav item active class item found, select first item default activate body content.script included www folder app. ’ll see Chapter 16 custom input binding may perfectly handle situation preferred.result shown Figure 14.4. ’d also suggest include least 1 input/output per tab, test whether everything works properly.\nFIGURE 14.4: Tabler template navbar\nLooks like done main template elements. Actually, wouldn’t better include, least, card containers?","code":"$(function() {\n  // this makes sure to trigger the show event on the active   tab at start\n  let activeTab = $('#navbar-menu .nav-link.active');\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $('#navbar-menu .nav-link')\n      .first()\n      .tab('show');\n  }\n});\n#thematic_on()\n#onStop(thematic_off)\n# example with custom JS code to activate tabs\nshinyAppDir(system.file(\"chapter12/tabler_tabs\", package = \"OSUICode\"))\n"},{"path":"custom-templates-skeleton.html","id":"card-containers","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.5 Card containers","text":"Card central piece template may contain visualizations, metrics much . Fortunately, Tabler large range card containers.","code":""},{"path":"custom-templates-skeleton.html","id":"classic-card","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.5.1 Classic card","text":"call classic card like box container shinydashboard. card structure key elements:width control space taken card Bootstrap grida title, general header (tabler always follow rule header optional)body main contentstyle elements like color statusesa footer (optional, tabler include )comprehensive list tabler card features may found . faster, copy following HTML code html2R shiny app convert Shiny tagsBelow result. next step consist replacing content parameters tabler_card function, whenever necessary. instance, first <div> sets width card. Bootstrap grid ranges 0 12, creating width parameter control card size. proceed similarly title, status, body content. seems reasonable allow title NULL (, title shown), thing status. Regarding card default width, value six also makes sense, take half row.meantime, ’d also nice able display cards row. Let’s create tabler_row:, show example tabler_card function, combination apexcharter dreamRs.code output also shown Figure 14.5.\nFIGURE 14.5: Tabler card component\n","code":"<div class=\"col-md-6\">\n  <div class=\"card\">\n    <div class=\"card-status-top bg-danger\"><\/div>\n    <div class=\"card-body\">\n      <h3 class=\"card-title\">Title<\/h3>\n      <p>Some Text.<\/p>\n    <\/div>\n  <\/div>\n<\/div>\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, padding = NULL) {\n  \n  card_cl <- paste0(\n    \"card\", \n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  status_tag <- if (!is.null(status)) {\n    div(class = paste0(\"card-status-top bg-\", status))\n  }\n  \n  body_tag <- div(\n    class = \"card-body\",\n    # we could have a smaller title like h4 or h5...\n    if (!is.null(title)) {\n      h3(class = \"card-title\", title)\n    },\n    ...\n  )\n  \n  main_wrapper <- div(class = paste0(\"col-md-\", width))\n  card_wrapper <- div(class = card_cl)\n  \n  card_wrapper <- card_wrapper %>% tagAppendChildren(status_tag, body_tag)\n  main_wrapper %>% tagAppendChild(card_wrapper)\n}\n\ntabler_row <- function(...) {\n  div(class = \"row row-deck\", ...)\n}\n\n# test the card\ndata(\"economics_long\")\neconomics_long <- economics_long %>%\n  group_by(variable) %>%\n  slice((n()-100):n())\n\nspark_data <- data.frame(\n  date = Sys.Date() + 1:20,\n  var1 = round(rnorm(20, 50, 10)),\n  var2 = round(rnorm(20, 50, 10)),\n  var3 = round(rnorm(20, 50, 10))\n)\n\nmy_card <- tabler_card(\n  apexchartOutput(\"my_chart\"), \n  title = \"My card\", \n  status = \"danger\"\n)\n\nui <- tabler_page(\n  tabler_body(\n    tabler_row(\n      my_card,\n      tabler_card(\n        apexchartOutput(\"spark_box\"), \n        title = \"My card\", \n        status = \"success\"\n      ) \n    )\n  )\n)\nserver <- function(input, output) {\n  output$my_chart <- renderApexchart({\n    apex(data = economics_long, type = \"area\", mapping = aes(x = date, y = value01, fill = variable)) %>%\n      ax_yaxis(decimalsInFloat = 2) %>% # number of decimals to keep\n      ax_chart(stacked = TRUE) %>%\n      ax_yaxis(max = 4, tickAmount = 4)\n  })\n  \n  output$spark_box <- renderApexchart({\n    spark_box(\n      data = spark_data[, c(\"date\", \"var3\")],\n      title = mean(spark_data$var3), \n      subtitle = \"Variable 3\",\n      color = \"#FFF\", background = \"#2E93fA\",\n      title_style = list(color = \"#FFF\"),\n      subtitle_style = list(color = \"#FFF\")\n    )\n  })\n}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"ribbons-card-components","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.6 Ribbons: card components","text":"Let’s finish part including card component, namely ribbon.Integrating freshly created ribbon component requires modify card structure since ribbon added body tag, parameter associated slot. also modify tabler_card function htmltools contains tools help us. Since ribbon put card body (card container), may think tagAppendChild function, introduced Chapter 3:shown , ribbon successfuly included card tag. Now, check looks shiny app.\nFIGURE 14.6: Tabler ribbon component\n","code":"\ntabler_ribbon <- function(..., position = NULL, color = NULL, bookmark = FALSE) {\n  \n  ribbon_cl <- paste0(\n    \"ribbon\",\n    if (!is.null(position)) sprintf(\" bg-%s\", position),\n    if (!is.null(color)) sprintf(\" bg-%s\", color),\n    if (bookmark) \" ribbon-bookmark\"\n  )\n  div(class = ribbon_cl, ...)\n}\n\n# add the ribbon to a card\nmy_card <- tabler_card(title = \"Ribbon\", status = \"info\")\n\nstr(my_card)\n## List of 3\n##  $ name    : chr \"div\"\n##  $ attribs :List of 1\n##   ..$ class: chr \"col-md-6\"\n##  $ children:List of 1\n##   ..$ :List of 3\n##   .. ..$ name    : chr \"div\"\n##   .. ..$ attribs :List of 1\n##   .. .. ..$ class: chr \"card\"\n##   .. ..$ children:List of 2\n##   .. .. ..$ :List of 3\n##   .. .. .. ..$ name    : chr \"div\"\n##   .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. ..$ class: chr \"card-status-top bg-info\"\n##   .. .. .. ..$ children: list()\n##   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. .. ..$ :List of 3\n##   .. .. .. ..$ name    : chr \"div\"\n##   .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. ..$ class: chr \"card-body\"\n##   .. .. .. ..$ children:List of 1\n##   .. .. .. .. ..$ :List of 3\n##   .. .. .. .. .. ..$ name    : chr \"h3\"\n##   .. .. .. .. .. ..$ attribs :List of 1\n##   .. .. .. .. .. .. ..$ class: chr \"card-title\"\n##   .. .. .. .. .. ..$ children:List of 1\n##   .. .. .. .. .. .. ..$ : chr \"Ribbon\"\n##   .. .. .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. .. .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##   .. ..- attr(*, \"class\")= chr \"shiny.tag\"\n##  - attr(*, \"class\")= chr \"shiny.tag\"\nmy_card$children[[1]] <- my_card$children[[1]] %>% \n  tagAppendChild(\n    tabler_ribbon(\n      icon(\"info-circle\", class = \"fa-lg\"), \n      bookmark = TRUE,\n      color = \"red\"\n    )\n  )\n\nui <- tabler_page(\n  tabler_body(\n    my_card\n  )\n)\nserver <- function(input, output) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-skeleton.html","id":"icons","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.2.7 Icons","text":"mentionned may include fontawesome icons provided Shiny, well libraries. Moreover, Tabler internal svg library located .","code":""},{"path":"custom-templates-skeleton.html","id":"exercises-2","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"14.3 Exercises","text":"Consider tab card bottom tabler documentation. Propose implementation feature.look page. Select 2 elements create corresponding R functions.","code":""},{"path":"custom-templates-testing.html","id":"custom-templates-testing","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15 Testing and validating templates elements","text":"now, building template boilerplate, main skeleton functions (page, navbar, navbar menu, …) well components cards, ribbons, progress bars. also exposed techniques substantially give interactivity template, leveraging freshly acquired JavaScript skills. mean ready make template public? yet since essentials steps missing:Input validation crucial step toward success. Briefly, consists checking user inputs functions fail safely elegantly providing meaningful error messages warnings. concept already covered R Data Science, Advanced R lot resources. Hence, trying reinvent wheel rely already existing patterns, whose effectiveness longer demonstrated. Welcome defensive programming world!hand, testing components allows check functions supposed . Consequently, proof robustness, increases reproducibility. significantly reduces mental load comes start code refactoring, thereby making feel slightly less guilty creating breaking changes since, time, tests able capture error.","code":""},{"path":"custom-templates-testing.html","id":"validate-template-functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1 Validate template functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"create-your-own-validations","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.1 Create your own validations","text":", show examples validate user inputs. first consider tabler_card element Chapter 14.first thing think validate. , see least 3 test:checking status valuechecking width valuechecking padding valueWriting validation tests requires knowledge underlying mechanisms. case, must know Bootstrap 4 grid rules valid color statuses. Bootstrap 4 grid ranges 1 12. words, card width 12 take full page wherease, may align 3 cards width 4. Valid statuses primary, secondary, success, info, danger, warning, light dark.therefore pretty straightforward validate card width: must numeric 1 12. Moreover, since template containers including width parameter, create functionTo check status parameter, save valid statuses vector take validStatuses function shinydashboard utils. also make sense create function since parameter widely used among template components. Contrary shinydashboard function, custom valid_status fail status NULL since mandatory parameter.finish padding validation. According Tabler documentation, three possible choices, namely sm, md lg.apply validation card element.R 4.0.0, stopifnot function may good alternative stop.recommend reasonable validate every single parameter.","code":"\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\n\nvalidate_width <- function(width) {\n  if (is.numeric(width)) {\n    if (width < 1 || width > 12) {\n      stop(\"width must belong to [1, 12], as per Bootstrap 4 grid documentation. See more at https://getbootstrap.com/docs/4.0/layout/grid/\")\n    }\n  } else {\n    stop(\"width must be numeric\")\n  }\n}\n\n# validate_width(-1)\n# validate_width(13)\n# validate_width(\"string\")\n\nvalid_statuses <- c(\n  \"primary\", \n  \"secondary\",\n  \"success\", \n  \"info\", \n  \"warning\", \n  \"danger\",\n  \"light\",\n  \"dark\"\n)\n\nvalidate_status <- function(status) {\n\n  if (is.null(status)) {\n    return(TRUE) \n  } else {\n    if (status %in% valid_statuses) {\n      return(TRUE)\n    }\n  }\n\n  stop(\"Invalid status: \", status, \". Valid statuses are: \",\n       paste(valid_statuses, collapse = \", \"), \".\")\n}\n\nvalid_paddings <- c(\"sm\", \"md\", \"lg\")\n\nvalidate_padding <- function(padding) {\n  if (!is.null(padding)) {\n    if (!(padding %in% valid_paddings)) {\n      stop(\"Invalid status: \", padding, \". Valid choices are: \",\n       paste(valid_paddings, collapse = \", \"), \".\")\n    }\n  }\n}\n\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  validate_status(status)\n  validate_width(width)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\n"},{"path":"custom-templates-testing.html","id":"existing-utils-functions","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.2 Existing utils functions","text":"","code":""},{"path":"custom-templates-testing.html","id":"validating-tags","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.2.1 Validating tags","text":"problem approach may take time create validation functions. Fortunately, packages like {shinydashboard} include really powerful validation functions, especially tagAssert. function included book side package may use time.Importantly, tagAssert raise error condition fulfilled. Another function, tagMatches simply returns TRUE/FALSE. looks ìd, class, name tag attribute like data-value. Like tagAssert, tagMatches also available book side package.","code":"\nmyTag <- div(class = \"bg-blue\")\n\ntagAssert(myTag, type = \"div\")\ntagAssert(myTag, type = \"li\") # will fail\ntagAssert(myTag, class = \"bg-blue\")\n\ntagMatches(myTag, id = \"d\")\ntagMatches(myTag, class = \"bg-blue\")\n"},{"path":"custom-templates-testing.html","id":"validating-css-units","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.2.2 Validating CSS units","text":"validateCssUnit belongs Shiny exported function. useful validate parameter involving CSS unit like width height.point reuse already exists tools help efficient validating template elements.","code":""},{"path":"custom-templates-testing.html","id":"example-refine-navbar-menu-items","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.3 Example: refine navbar menu items","text":"","code":""},{"path":"custom-templates-testing.html","id":"avoid-wrong-jquery-selectors","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.3.1 Avoid wrong jQuery selectors","text":"Chapter 14, developed tabler_navbar_menu_item function. tabName parameter critical since responsible driving navigation. must ensure value provided user compatible jQuery selectors conventions. illustrate problem, consider example , second tab name hello%%&1:Notice see second tab content. proposal validate_tab function. first detect punctuation provided input. Although mandatory, extract send meaningful error message.\nfinally raise error punctuation found.validate_tabName must inserted beginning tabler_navbar_menu_item well tabler_tab_item, latter also relying tabName.","code":"\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      inputId = \"mymenu\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"hello%%&1\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"hello%%&1\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\", \"More\")\n    )\n  )\n)\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\nshinyApp(ui, server)\n\nvalidate_tabName <- function(tabName) {\n  temp <- grepl(\"[[:punct:]]\", tabName)\n  wrong_selector <- stringr::str_extract_all(tabName, \"[[:punct:]]\")[[1]] %>% \n    stringr::str_c(collapse = \"\")\n  if (temp) stop(paste(\"Please do not use punctuation characters like\",  wrong_selector,\"in tabNames. This might cause JavaScript issues.\"))\n}\n# validate_tabName(\"test%\") # fails\nvalidate_tabName(\"plop\")\n"},{"path":"custom-templates-testing.html","id":"checking-for-multiple-selected-items","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.1.3.2 Checking for multiple selected items","text":"Another issue possibility multiple selected tab items start. Looking back tabler_navbar_menu, surprising since absolutely checks!classic method inspect items provided tabler_navbar_menu capture list. extract children items lapply(list(...) , \"[\", 3) (shiny tag structure first position holds tag name, second named list attributes third slot children). children apply shinydashboard internal function findAttribute, allows search specific attribute value given tag. use vapply return atomic vector (like c(1, 2), lists vectors recursive!) compute sum vector. TRUE occurrence counted 1 FALSE 0. Therefore, latter higher 1, means user provided 1 selected tab, subsequently raise error.","code":"\ntabler_navbar_menu <- function(...) {\n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\n\ntabler_navbar_menu <- function(...) {\n  \n  items <- lapply(list(...) , `[`, 3)\n  res <- sum(vapply(items, findAttribute, \"class\", \"nav-link active\", FUN.VALUE = logical(1)))\n  if (res > 1) stop(\"Cannot have multiple selected items at start!\")\n  \n  tags$ul(class = \"nav nav-pills navbar-nav\", ...)\n}\n\n# the code below must fail\nmenu <- tabler_navbar_menu(\n  tabler_navbar_menu_item(\n    text = \"Tab 1\",\n    icon = NULL,\n    tabName = \"tab1\",\n    selected = TRUE\n  ),\n  tabler_navbar_menu_item(\n    text = \"Tab 2\",\n    icon = NULL,\n    tabName = \"tab2\",\n    selected = TRUE\n  )\n)\n"},{"path":"custom-templates-testing.html","id":"testing-templates-elements","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.2 Testing templates elements","text":"Imagine one day, someone accidentally remove width validation function, significant refactoring. Later, receive new message github, stating someone opened new issue. According report, card properly displayed although error thrown. Among 400 lines code provided, hardly notice width parameter set 13, line Bootstrap 4 documentation, remain 1 12. lost 10 minutes, end user, even worse.proper testing pipeline, problem avoided. Ironically, writing corresponding test takes 2 minutes.reference testing functions {testthat} package. short, unit test consists setting expectations function check whether fail pass. instance, tabler_card example, validate_width must fail given width expected bounds numeric. apply test_that function description test context, followed expectations inside curly brackets.test validate_status validate_padding.far good. lines code, substantially increased robustness function without increasing complexity. Now, let’s try remove validate_width step tabler_card.Notice 3 tests elegantly fail. provided context (“validate width works”) immediately indicates culprit, game changer debugging.","code":"\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})\n\ntest_that(\"validate status works\", {\n  expect_error(tabler_card(status = \"toto\"))\n})\n\ntest_that(\"validate padding works\", {\n  expect_error(tabler_card(width = \"xs\"))\n})\n\ntabler_card <- function(..., title = NULL, status = NULL, width = 6, stacked = FALSE, padding = NULL) {\n  \n  validate_status(status)\n  validate_padding(padding)\n  \n  card_cl <- paste0(\n    \"card\", \n    if (stacked) \" card-stacked\",\n    if (!is.null(padding)) paste0(\" card-\", padding)\n  )\n  \n  div(\n    class = paste0(\"col-md-\", width),\n    div(\n      class = card_cl,\n      if (!is.null(status)) {\n        div(class = paste0(\"card-status-top bg-\", status))\n      },\n      div(\n        class = \"card-body\",\n        # we could have a smaller title like h4 or h5...\n        if (!is.null(title)) {\n          h3(class = \"card-title\", title)\n        },\n        ...\n      )\n    )\n  )\n  \n}\n\n\ntest_that(\"validate width works\", {\n  expect_error(tabler_card(width = -1))\n  expect_error(tabler_card(width = 13))\n  expect_error(tabler_card(width = \"hello world\"))\n})\n"},{"path":"custom-templates-testing.html","id":"testing-template-behavior","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.2.1 Testing template behavior","text":"(crrry)","code":""},{"path":"custom-templates-testing.html","id":"testing-javascript","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"15.3 Testing JavaScript","text":"finish chapter without mentionning tools validate JavaScript code. particularly focus JSHint, R wrapper, nicely provided dreamRs team. example check shinyMobile JavaScript input bindings :may fine tune jshint_file behavior jshint_options. One often tempted call eval JS code, result JSHint error. option called evil exists disable corresponding test. However, recommand play game, accept error try fix instead cheating options!","code":"\nbindings <- list.files(\n  path = system.file(\"framework7-5.5.0/input-bindings\", package = \"shinyMobile\"),\n  recursive = TRUE,\n  full.names = TRUE\n)\njshint_file(input = bindings, options = jshint_options(jquery = TRUE, globals = list(\"Shiny\", \"app\")))\n"},{"path":"custom-templates-inputs.html","id":"custom-templates-inputs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16 Develop custom input widgets","text":"previous chapter, built template dependencies, page skeleton, well containers like cards. However, nice customize user interactions integrating new inputs. chapter, apply knowledge Chapter 8 creating new Shiny input.","code":""},{"path":"custom-templates-inputs.html","id":"tabler-action-button","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.1 Tabler action button","text":"Let’s start simple input: action button. Tabler built-HTML buttons substantial amount custom styles, compared classic Shiny action button.","code":""},{"path":"custom-templates-inputs.html","id":"reminders-about-the-action-button","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.1.1 Reminders about the action button","text":"code actionButton input.button tag attributes: id, style, type, class, data-val, label children passed via ...app starts, action button value 0 click increment value 1. behaviour created? Shiny input element (radio, slider), associated JavaScript file, called input binding, can find . case, interested action button binding:see whole script since focus first method, find. look elements class action-button, making possible define multiple action buttons time.Consequently, go back previous section, actionButton class action-button, thereby making visible binding. Interestingly, elements class action-button considered shiny input binding.","code":"\nactionButton <- function (inputId, label, icon = NULL, width = NULL, ...)  {\n  value <- restoreInput(id = inputId, default = NULL)\n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) paste0(\"width: \", validateCssUnit(width), \";\"), \n    type = \"button\", \n    class = \"btn btn-default action-button\", \n    `data-val` = value, \n    list(validateIcon(icon), label), ...\n  )\n}\nvar actionButtonInputBinding = new InputBinding();\n$.extend(actionButtonInputBinding, {\n  find: function(scope) {\n    return $(scope).find(\".action-button\");\n  },\n  getValue: function(el) {\n    return $(el).data('val') || 0;\n  },\n  // ... other methods\n});"},{"path":"custom-templates-inputs.html","id":"application-to-tabler","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.1.2 Application to Tabler","text":"First , let’s compare tabler HTML button Shiny action button.convert R. button API contains style leave reader add extra elements exercise.Tabler, button status mandatory, reason parameter function. Moreover, need add horizontal right margin icon, provided label renders well (mr-1, m stands margin, r right direction 1 margin value). assume default, button wil blue color, given btn-primary.easily check clicking button increments related input. Thus, one may see easy implement custom Tabler input button, built top Shiny action button. output shown Figure 16.1.\nFIGURE 16.1: Tabler action button\ngeneral rule, don’t try reinvent wheel see whether existing Shiny element may reused/adapted!","code":"<button class=\"btn btn-primary\">Button<\/button>\ntabler_button <- function(inputId, label, status = NULL, icon = NULL, width = NULL, ...) {\n  \n  btn_cl <- paste0(\n    \"btn action-button\",\n    if (is.null(status)) {\n      \" btn-primary\"\n    } else {\n      paste0(\" btn-\", status)\n    }\n  )\n  \n  value <- restoreInput(id = inputId, default = NULL)\n  \n  # custom right margin\n  if (!is.null(icon)) icon$attribs$class <- paste0(\n    icon$attribs$class, \" mr-1\"\n  )\n  \n  tags$button(\n    id = inputId, \n    style = if (!is.null(width)) paste0(\"width: \", validateCssUnit(width), \";\"), \n    type = \"button\", \n    class = btn_cl, \n    `data-val` = value, \n    list(icon, label), ...\n  )\n}\n\nui <- tabler_page(\n  tabler_body(\n    tabler_button(\n      \"btn\", \n      HTML(paste(\"Value\", textOutput(\"val\"), sep = \":\")), \n      icon = icon(\"thumbs-up\"), \n      width = \"25%\"\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  output$val <- renderText(input$btn)\n}\n\nshinyApp(ui, server)\n"},{"path":"custom-templates-inputs.html","id":"toggle-switch","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.2 Toggle Switch","text":"implement toggle switch component.Notice tabler switch checkbox type, similar Shiny checkbox (switch checkbox different style)Therefore, able build top existing input binding. create tabler_switch function:Besides, may also create update_tabler_switch function similar updateCheckboxInput. also need dropNulls, function removes NULL elements list (function often used custom Shiny templates). remember, sendInputMessage R received receiveMessage method JavaScript side.following example, action button toggles switch input value clicked, shown Figure 16.2.\nFIGURE 16.2: Tabler action button updating toggle input\nEt voilà! Two inputs minutes.","code":"<label class=\"form-check form-switch\">\n  <input class=\"form-check-input\" type=\"checkbox\" checked>\n  <span class=\"form-check-label\">Option 1<\/span>\n<\/label>\ncheckboxInput(\"test\", \"Test\", TRUE)\n\ntabler_switch <- function(inputId, label, value = FALSE, width = NULL) {\n  \n  value <- restoreInput(id = inputId, default = value)\n  input_tag <- tags$input(\n    id = inputId, \n    type = \"checkbox\",\n    class = \"form-check-input\"\n  )\n  \n  if (!is.null(value) && value) {\n    input_tag <- input_tag %>% tagAppendAttributes(checked = \"checked\")\n  }\n  \n  input_wrapper <- tags$label(\n    class = \"form-check form-switch\", \n    style = if (!is.null(width)) {\n      paste0(\"width: \", validateCssUnit(width), \";\")\n    }\n  )\n  \n  input_wrapper %>% tagAppendChildren(\n    input_tag,\n    span(class = \"form-check-label\", label)\n  )\n}\n\ndropNulls <- function (x) {\n  x[!vapply(x, is.null, FUN.VALUE = logical(1))]\n}\n\nupdate_tabler_switch <- function (session, inputId, label = NULL, value = NULL) {\n  message <- dropNulls(list(label = label, value = value))\n  session$sendInputMessage(inputId, message)\n}\n\nui <- tabler_page(\n  tabler_body(\n    fluidRow(\n      tabler_button(\"update\", \"Go!\", width = \"25%\", class = \"mr-2\"),\n      tabler_switch(\"toggle\", \"Switch\", value = TRUE, width = \"25%\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toggle))\n  observeEvent(input$update, {\n    update_tabler_switch(\n      session, \n      \"toggle\", \n      value = !input$toggle\n    )\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"custom-templates-inputs.html","id":"navbar-menu-input","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.3 Navbar menu input","text":"stated Chapter 8, quite straightforward bind elements pure inputs (HTML elements input tag) Shiny. reminder, created custom input binding detect state shinydashboard box (collapsed/uncollapsed).\nchapter 14, created tabler_navbar well tabler_navbar_menu tabler_navbar_menu_item. shinydashboard, nice capture currently selected tab able perform actions server side, updating selected tab based button click.start? First , add id attribute tabler_navbar_menu holds corresponding input$id. Whether use inputId id parameter name , keep mind inputId exist HTML.next step navbarMenuBinding creation. decide look navbar-nav class find method. , describe binding step step. may find whole working code end example.initialize method, ensure tab selected start, first tab selected default. Otherwise, select activated tab. use string interpolation ease insertion JS code strings (${menuId} .nav-link.active).role getValue return currently selected tab. reminder, tabler_navbar_menu_item function:function, active item element classes nav-link active. recover tab value stored data-value attribute. bit jQuery trick!setValue function allowing update active tab. Bootstrap 4 already \npredefined methods activate tabs. easiest way select tab name like $('#tabMenu [href=\"#tab1\"]').tab('show'). receiveMessage simply applying setValue method.Besides, create update_tabler_tab_item function.subscribe tell Shiny change current input value made available\nwhole app. may listen multiple events, keeping mind events occur following order:hide.bs.tab (current active tab)show.bs.tab (--shown tab)hidden.bs.tab (previous active tab, one hide.bs.tab event)shown.bs.tab (newly-active just-shown tab, one show.bs.tab event)Hence, makes sense listen shown.bs.tab (wait current tab shown).recap binding creation registration included:include custom input binding package? side package code, created following HTML dependency:also updated add_tabler_deps, .test new navbar_menu binding .!","code":"\ntabler_navbar_menu <- function(..., inputId = NULL) {\n  tags$ul(id = inputId, class = \"nav nav-pills navbar-nav\", ...)\n}\nfind: function(scope) {\n  return $(scope).find('.navbar-nav');\n}initialize: function(el) {\n  let menuId = '#' + $(el).attr('id');\n  let activeTab = $(`${menuId} .nav-link.active`);\n  // if multiple items are found\n  if (activeTab.length > 0) {\n    let tabId = $(activeTab).attr('data-value');\n    $(activeTab).tab('show');\n    $(`#${tabId}`).addClass('show active');\n  } else {\n    $(`${menuId} .nav-link`)\n      .first()\n      .tab('show');\n  }\n}\ntabler_navbar_menu_item <- function(text, tabName, icon = NULL, selected = FALSE) {\n  \n  item_cl <- paste0(\"nav-link\", if(selected) \" active\")\n  \n  tags$li(\n    class = \"nav-item\",\n    a(\n      class = item_cl,\n      href = paste0(\"#\", tabName),\n      `data-toggle` = \"pill\", # see https://getbootstrap.com/docs/4.0/components/navs/\n      `data-value` = tabName,\n      role = \"tab\",\n      span(class = \"nav-link-icon d-md-none d-lg-inline-block\", icon),\n      span(class = \"nav-link-title\", text)\n    )\n  )\n}\ngetValue: function(el) {\n  let activeTab = $(el).find('a').filter('nav-link active');\n  return $(activeTab).attr('data-value');\n}setValue: function(el, value) {\n  let hrefVal = '#' + value;\n  let menuId = $(el).attr('id');\n  $(`#${menuId} a[href=\"${hrefVal}\"]`).tab('show');\n}\n\nreceiveMessage: function(el, data) {\n  this.setValue(el, data);\n}\nupdate_tabler_tab_item <- function(inputId, value, session = getDefaultReactiveDomain()) {\n  session$sendInputMessage(inputId, message = value)\n}\nsubscribe: function(el, callback) {\n  // important to use shown.bs.tab and not show.bs.tab!\n  $(el).on('shown.bs.tab.navbarMenuBinding', function(e) {\n    callback();\n  });\n},\n  \nunsubscribe: function(el) {\n  $(el).off('.navbarMenuBinding');\n}$(function() {\n  // Input binding\n  let navbarMenuBinding = new Shiny.InputBinding()\n  $.extend(navbarMenuBinding, {\n    find: function(scope) {\n      return $(scope).find('.navbar-nav');\n    },\n    initialize: function(el) {\n      let menuId = '#' + $(el).attr('id');\n      let activeTab = $(`${menuId} .nav-link.active`);\n      // if multiple items are found\n      if (activeTab.length > 0) {\n        let tabId = $(activeTab).attr('data-value');\n        $(activeTab).tab('show');\n        $(`#${tabId}`).addClass('show active');\n      } else {\n        $(`${menuId} .nav-link`)\n          .first()\n          .tab('show');\n      }\n    },\n    // Given the DOM element for the input, return the value\n    getValue: function(el) {\n      let activeTab = $(el).find('a').filter('.nav-link.active');\n      return $(activeTab).attr('data-value');\n    },\n    setValue: function(el, value) {\n      let hrefVal = '#' + value;\n      let menuId = $(el).attr('id');\n      $(`#${menuId} a[href=\"${hrefVal}\"]`).tab('show');\n    },\n    receiveMessage: function(el, data) {\n      this.setValue(el, data);\n    },\n    subscribe: function(el, callback) {\n      $(el).on('shown.bs.tab.navbarMenuBinding', function(event) {\n        callback();\n      });\n    },\n    unsubscribe: function(el) {\n      $(el).off('.navbarMenuBinding');\n    }\n  });\n  \n  Shiny.inputBindings.register(navbarMenuBinding, 'navbar-menu');\n});\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = c(href = \"tabler\"),\n  package = \"OSUICode\",\n  script = \"input-bindings/navbarMenuBinding.js\"\n)\n\nadd_tabler_deps <- function(tag) {\n  # below, the order is of critical importance!\n  deps <- list(bs4_deps, tablers_deps, tabler_custom_js)\n  attachDependencies(tag, deps, append = TRUE)\n}\n\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = tabler_navbar_menu(\n      id = \"current_tab\",\n      tabler_navbar_menu_item(\n        text = \"Tab 1\",\n        icon = NULL,\n        tabName = \"tab1\",\n        selected = TRUE\n      ),\n      tabler_navbar_menu_item(\n        text = \"Tab 2\",\n        icon = NULL,\n        tabName = \"tab2\"\n      )\n    ),\n    tabler_button(\"update\", \"Change tab\", icon = icon(\"exchange-alt\"))\n  ),\n  tabler_body(\n    tabler_tab_items(\n      tabler_tab_item(\n        tabName = \"tab1\",\n        sliderInput(\n          \"obs\", \n          \"Number of observations:\",\n          min = 0,\n          max = 1000, \n          value = 500\n        ),\n        plotOutput(\"distPlot\")\n      ),\n      tabler_tab_item(\n        tabName = \"tab2\",\n        p(\"Second Tab\")\n      )\n    ),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  output$distPlot <- renderPlot({\n    hist(rnorm(input$obs))\n  })\n  \n  observeEvent(input$current_tab, {\n    showNotification(\n      paste(\"Hello\", input$current_tab), \n      type = \"message\",\n      duration = 1\n    )\n  })\n  \n  observeEvent(input$update, {\n    newTab <- if (input$current_tab == \"tab1\") \"tab2\" else \"tab1\"\n    update_tabler_tab_item(\"current_tab\", newTab)\n  })\n}\nshinyApp(ui, server)\n"},{"path":"custom-templates-inputs.html","id":"exercises-3","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"16.4 Exercises","text":"look Tabler documentation buttons extend tabler_button function accordingly.Propose implementation Advanced selectboxes shown .Cards central elements templates. tabset panels. Improve tab_card function developed exercise 1 Chapter 14 one may easily recover currently selected tab. Hint: custom input binding required.","code":""},{"path":"custom-templates-interactivity.html","id":"custom-templates-interactivity","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17 Adding more interactivity","text":"part, going add life template element. first see enhance existing static HTML component. explore complex feedback mechanisms provide interactivity app.JavaScript handlers described gathered HTML dependency, well custom input binding(s).","code":"\n# contains bindings and other JS code\ntabler_custom_js <- htmlDependency(\n  name = \"tabler-bindings\",\n  version = \"1.0.7\",\n  src = c(href = \"tabler\"),\n  package = \"OSUICode\",\n  script = c(\n    \"input-bindings/navbarMenuBinding.js\",\n    \"tabler_progress_handler.js\",\n    \"tabler_toast_handler.js\",\n    \"tabler_dropdown_handler.js\",\n    \"tabler_insert_tab_handler.js\"\n  )\n)\n"},{"path":"custom-templates-interactivity.html","id":"custom-progress-bars","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.1 Custom progress bars","text":"Progress bars good way display metric related progress, instance tracking number remaining tasks project. general, elements static HTML. Hence, interesting able update current value server side. Since proper input element, implementing input binding inappropriate decide proceed sendCustomMessage/addCustomMessageHandler pair. first create tabler_progress tag mainly composed :style gives current progress value. main elementmin max bounds, general 0 100id ensures progress bar uniqueness, thereby avoiding conflictsThe next element update_tabler_progress function sends 2 elements R JS:progress idThe new valueOn JS side, basic addCustomMessageHandler. mentioned Chapter 6, sendCustomMessage addCustomMessageHandler connected type parameter. crucial! Moreover, sent message R list, becomes JSON, meaning elements must accessed . JS:finally test components simple app, output depicted Figure 17.1:\nFIGURE 17.1: Progress bar component updated slider\nNOTE: handle custom messages shiny modules? Well, pretty straightforward: wrap id module namespace given session$ns() sending JS. may even default (without modules) like previous example since session$ns() \"\".way directly update progress client avoid exchange data R JS, thereby saving time?idea get rid classic session$sendCustomMessage Shiny.addCustomMessageHandler method. directly create function \ninsert script UI taking trigger target main parameters. function inserted multiple times multiple triggers update target. JS logic slightly different:wait shiny connected inputs/bindings readyWe recover trigger element JS/jQuery methodWe leverage noUiSlider API listen update range. ’s fine slider instance already initialized/defined shinyWidget input binding. work waiting shiny connected (may try)! Notice use .get() event listener, avoids repeat slider.noUiSliderWe modify width CSS property target like previous exampleQuestion: Run example external web browser, stop app RStudio. Try move sliders. happens progress bars? Compare classic update function. explain ?Overall way bit complex since sometimes need know API trigger listen correct events. Yet, assuming complex app data manipulation, tons inputs visualizations, everything can done client (web browser) less work R server part better end-user experience! Building outstanding shiny apps designing amazing user interfaces, ’s also optimization speed mentioned Colin Fay et al. book.","code":"\ntabler_progress <- function(id = NULL, value) {\n  div(\n    class = \"progress\",\n    div(\n      id = id, \n      class = \"progress-bar\",\n      style = paste0(\"width: \", value, \"%\"),\n      role = \"progressbar\",\n      `aria-valuenow` = as.character(value),\n      `aria-valuemin` = \"0\",\n      `aria-valuemax` = \"100\",\n      span(class = \"sr-only\", \"38% Complete\")\n    )\n  )\n}\n\nupdate_tabler_progress <- function(id, value, session = shiny::getDefaultReactiveDomain()) {\n  message <- list(id = session$ns(id), value = value)\n  session$sendCustomMessage(type = \"update-progress\", message)\n}\n$(function () {\n  Shiny.addCustomMessageHandler('update-progress', function(message) {\n    $('#' + message.id).css('width', message.value +'%');\n  });\n});\nui <- tabler_page(\n  tabler_body(\n    noUiSliderInput(\n      inputId = \"progress_value\",\n      label = \"Progress value\",\n      min = 0, \n      max = 100,\n      value = 20\n    ),\n    tabler_progress(id = \"progress1\", 12)\n  )\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$progress_value, {\n    update_tabler_progress(\n      id = \"progress1\", \n      input$progress_value\n    )\n  })\n}\nshinyApp(ui, server)\n$(document).on('shiny:connected', function(event) {\n  var slider = document.getElementById('triggerId');\n  slider.noUiSlider.on('update', function(event) {\n    $('#targetId').css('width', this.get() + '%');\n  });\n});\nupdate_tabler_progress2 <- function(trigger, target) {\n  tags$head(\n    tags$script(\n      paste0(\n        \"$(document).on('shiny:connected', function(event) {\n            var slider = document.getElementById('\", trigger, \"');\n            slider.noUiSlider.on('update', function(event) {\n              $('#\", target, \"').css('width', this.get() + '%');\n            });\n          });\n        \"\n      )\n    )\n  )\n}\n\nui <- tabler_page(\n  update_tabler_progress2(\"progress_value\", \"progress1\"),\n  update_tabler_progress2(\"progress_value2\", \"progress2\"),\n  tabler_body(\n    fluidRow(\n      noUiSliderInput(\n        inputId = \"progress_value\",\n        label = \"Progress value 1\",\n        min = 0, \n        max = 100,\n        value = 20\n      ),\n      noUiSliderInput(\n        inputId = \"progress_value2\",\n        label = \"Progress value 2\",\n        min = 0, \n        max = 100,\n        value = 80,\n        color = \"red\"\n      )\n    ),\n    tabler_progress(id = \"progress1\", 12),\n    br(), br(),\n    tabler_progress(id = \"progress2\", 100)\n  )\n)\n\nserver <- function(input, output, session) {}\nshinyApp(ui, server)\n"},{"path":"custom-templates-interactivity.html","id":"user-feedback-toasts","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.2 User feedback: toasts","text":"Toasts components send discrete user feedback, contrary modals open middle page. Toasts may open sides window similar Shiny notifications (see ). tabler toast component built top Bootstrap 4. Therefore, rely documentation.","code":""},{"path":"custom-templates-interactivity.html","id":"toast-skeleton","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.2.1 Toast skeleton","text":"skeleton HTML structure toast:Toasts mainly composed header body. might close button case toast hide . multiple toasts appear one others, stacked, latest bottom stack. position controled style attribute like style=\"position: absolute; top: 0; right: 0;\" top-right placement. Accessibility parameters like aria-live detailed .","code":"<div class=\"toast show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" data-autohide=\"false\" data-toggle=\"toast\">\n  <div class=\"toast-header\">\n    <span class=\"avatar mr-2\" style=\"background-image: url(...)\"><\/span>\n    <strong class=\"mr-auto\">Mallory Hulme<\/strong>\n    <small>11 mins ago<\/small>\n    <button type=\"button\" class=\"ml-2 close\" data-dismiss=\"toast\" aria-label=\"Close\">\n      <span aria-hidden=\"true\">&times;<\/span>\n    <\/button>\n  <\/div>\n  <div class=\"toast-body\">\n    Hello, world! This is a toast message.\n  <\/div>\n<\/div>"},{"path":"custom-templates-interactivity.html","id":"the-toast-api","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.2.2 The toast API","text":"Toasts JS API control behaviour, instance $('<toast_selector>').toast(option), option JSON following fields:animation applies CSS fade transition toast TRUE defaultautohide automatically hides toast (TRUE default)delay delay hide toast (500 ms)3 methods: hide, show dispose (dispose ensures toast appear anymore). Finally, may fine tune toast behavior 4 events: show.bs.toast, shown.bs.toast, hide.bs.toast, hide.bs.toast, hidden.bs.toast (like tabs).","code":""},{"path":"custom-templates-interactivity.html","id":"r-implementation","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.2.3 R implementation","text":"first create toast skeleton. assume toast hide automatically, may remove delete button well data-autohide=\"false attribute. parameters optional except toast id, required toggle toast:create show_tabler_toast function. Since toast automatically hides, make sense create hide function, well dispose.corresponding JS handler given :first configure toast show . Notice chained jQuery methods (see Chapter 6)! optionally add event listener capture hidden.bs.toast event, may trigger action toast closed. input$id used purpose combination Shiny.setInputValue. Notice extra parameter {priority: 'event'}: basically, toast closed, input$id always TRUE, thereby breaking reactivity. Adding extra parameter forces evaluation input, although constant time.","code":"\ntabler_toast <- function(id, title = NULL, subtitle = NULL, ..., img = NULL) {\n  \n  toast_header <- div(\n    class = \"toast-header\",\n    if (!is.null(img)) {\n      span(\n        class = \"avatar mr-2\", \n        style = sprintf(\"background-image: url(%s)\", img)\n      )\n    },\n    if (!is.null(title)) strong(class = \"mr-2\", title),\n    if (!is.null(subtitle)) tags$small(subtitle)\n  )\n  \n  toast_body <- div(class = \"toast-body\", ...)\n  \n  toast_wrapper <- div(\n    id = id,\n    class = \"toast\",\n    role = \"alert\",\n    style = \"position: absolute; top: 0; right: 0;\",\n    `aria-live` = \"assertive\",\n    `aria-atomic` = \"true\",\n    `data-toggle` = \"toast\"\n  )\n  \n  toast_wrapper %>% tagAppendChildren(toast_header, toast_body)\n}\n\nshow_tabler_toast <- function(id, options = NULL, session = getDefaultReactiveDomain()) {\n  message <- dropNulls(\n    list(\n      id = id,\n      options = options\n    )\n  )\n  session$sendCustomMessage(type = \"tabler-toast\", message)\n}\n$(function() {\n  Shiny.addCustomMessageHandler('tabler-toast', function(message) {\n    $(`#${message.id}`)\n      .toast(message.options)\n      .toast('show');\n\n    // add custom Shiny input to listen to the toast state\n    $(`#${message.id}`).on('hidden.bs.toast', function() {\n      Shiny.setInputValue(message.id, true, {priority: 'event'});\n    });\n  });\n});"},{"path":"custom-templates-interactivity.html","id":"wrap-up","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.2.4 Wrap up","text":"\nFIGURE 17.2: Tabler toast element\n","code":"\nui <- tabler_page(\n  tabler_toast(\n    id = \"toast\", \n    title = \"Hello\", \n    subtitle = \"now\", \n    \"Toast body\",\n    img = \"https://preview-dev.tabler.io/static/logo.svg\"\n  ),\n  tabler_button(\"launch\", \"Go!\", width = \"25%\")\n)\n\nserver <- function(input, output, session) {\n  observe(print(input$toast))\n  observeEvent(input$launch, {\n    removeNotification(\"notif\")\n    show_tabler_toast(\n      \"toast\", \n      options = list(\n        animation = FALSE,\n        delay = 3000\n      )\n    )\n  })\n  \n  observeEvent(input$toast, {\n    showNotification(\n      id = \"notif\",\n      \"Toast was closed\", \n      type = \"warning\",\n      duration = 1,\n      \n    )\n  })\n}\n\nshinyApp(ui, server)\n"},{"path":"custom-templates-interactivity.html","id":"transform-an-element-in-a-custom-action-button","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.3 Transform an element in a custom action button","text":"seen Chapter 16, <button>, <> element holding action-button class may eventually become action button. Tabler template dropdown menus navbar like transform dropdown items action buttons. tabler_dropdown functions takes following parameters:id required show_tabler_dropdown (see ) function opens menutitle dropdown menu namesubtitle optional textimg optional image… hosts tabler_dropdown_item (see )convert dropdown item action button , add action-button class well id parameter recover corresponding input id.finally create show_tabler_dropdown well corresponding Shiny message handler.show dropdown, use dropdown method linked data-toggle=\"dropdown\" tabler_dropdown.Let’s play ! (See Figure 17.3)\nFIGURE 17.3: Tabler dropdown element\n","code":"\ntabler_dropdown <- function(..., id = NULL, title, subtitle = NULL, img = NULL) {\n  \n  img_tag <- if (!is.null(img)) {\n    span(\n      class = \"avatar\", \n      style = sprintf(\"background-image: url(%s)\", img)\n    )\n  }\n  \n  titles_tag <- div(\n    class = \"d-none d-xl-block pl-2\",\n    div(title),\n    if (!is.null(subtitle)) {\n      div(class = \"mt-1 small text-muted\", subtitle)\n    }\n  )\n  \n  link_tag <- a(\n    href = \"#\",\n    id = id, \n    class = \"nav-link d-flex lh-1 text-reset p-0\",\n    `data-toggle` = \"dropdown\",\n    `aria-expanded` = \"false\"\n  ) %>% \n    tagAppendChildren(img_tag, titles_tag)\n  \n  dropdown_tag <- div(\n    class = \"dropdown-menu dropdown-menu-right\", \n    `aria-labelledby` = id, \n    ...\n  )\n  \n  div(class = \"nav-item dropdown\") %>% tagAppendChildren(\n    link_tag,\n    dropdown_tag\n  )\n}\n\ntabler_dropdown_item <- function(..., id = NULL) {\n  a(id = id, class = \"dropdown-item action-button\", href = \"#\", ...)\n}\n\nshow_tabler_dropdown <- function(id, session = getDefaultReactiveDomain()) {\n  session$sendCustomMessage(type = \"show-dropdown\", message = id)\n}\n$(function() {\n  Shiny.addCustomMessageHandler('show-dropdown', function(message) {\n    $(`#${message}`).dropdown('show');\n  });\n});\nui <- tabler_page(\n  tabler_navbar(\n    brand_url = \"https://preview-dev.tabler.io\", \n    brand_image = \"https://preview-dev.tabler.io/static/logo.svg\", \n    nav_menu = NULL, \n    tabler_dropdown(\n      id = \"mydropdown\",\n      title = \"Dropdown\",\n      subtitle = \"click me\",\n      tabler_dropdown_item(\n        id = \"item1\",\n        \"Show Notification\"\n      ),\n      tabler_dropdown_item(\n        \"Do nothing\"\n      )\n    )\n  ),\n  tabler_body(\n    tabler_button(\"show\", \"Open dropdown\", width = \"25%\"),\n    footer = tabler_footer(\n      left = \"Rstats, 2020\", \n      right = a(href = \"https://www.google.com\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  \n  observeEvent(input$show, {\n    show_tabler_dropdown(\"mydropdown\")\n  })\n  \n  observeEvent(input$item1, {\n    showNotification(\n      \"Success\", \n      type = \"message\",\n      duration = 2,\n      \n    )\n  })\n}\nshinyApp(ui, server)\n"},{"path":"custom-templates-interactivity.html","id":"tab-events","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.4 Tab events","text":"remember navbar element tabsetpanel system Chapter 14? Navs allow organize app several tabs, acting like pages. powerful tool Shiny since currently straightforward create multi-pages Shiny apps like anyone website. Navs relie Bootstrap4 API used JS functions.","code":""},{"path":"custom-templates-interactivity.html","id":"insert-tabs","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.4.1 Insert/Remove tabs in tabsetpanel","text":"dynamically inserting/removing tabs tabler_navbar? chose example since involves extra technical details Shiny.proceed? remember tabler_navbar_menu_item tabler_tab_item coupling, inserting tab implies insert trigger navigation menu well content dashboard body. Therefore, need know structure insert. reminder:tabler_navbar_menu_item <li> elementstabler_navbar_menu_item <div> element specific classesWe design insert_tabler_tab function similar Shiny insertTab.\nhandle shiny modules, wrap inputId session namespace session$ns. create menu item element based provided new tab.JS side, capture R message (list) two elements:$divTag contains tab content$liTag contains tab link, ie navigation partDepending position parameter, use insertAfter insertBefore jQuery methods. Finally, newly inserted tab \nselected, activate corresponding tab element $(tablink).tab('show').tab well inserted, notice slider plot properly shown, illustrated Figure 17.4.\nFIGURE 17.4: newly inserted tab fails render content!\nexplain ? dependency issue: slider input relies specific JS library, namely ionRangesSlider, depicted Figure 17.5. previous example, open HTML inspector, dependency included page.\nFIGURE 17.5: Slider dependencies.\nEven stranger, use renderUI conditionally render slider (note: dummy example), dependency included go button pressed. Shiny includes ?Let’s look renderUI:last line returned processDeps(result, shinysession). function responsible handle dependencies runtime. processDeps (R side) works Shiny.renderContent (JS side). latter takes tag element well object containing HTML code dependencies, instance:following, modify insert_tabler_tab include dependencies processing step.apply Shiny.renderContent method tab content navigation item.check approach works expected.\nFIGURE 17.6: processDeps Shiny.renderContent action.\nEt voila! shown Figure 17.6, everything properly displayed.","code":"<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#ww\" data-toggle=\"pill\" data-value=\"ww\" role=\"tab\">\n    <span class=\"nav-link-icon d-md-none d-lg-inline-block\"><\/span>\n    <span class=\"nav-link-title\">ww<\/span>\n  <\/a>\n<\/li>\n\n<div role=\"tabpanel\" class=\"tab-pane fade container-fluid\" id=\"ww\"><\/div>\ninsert_tabler_tab <- function(inputId, tab, target, position = c(\"before\", \"after\"),\n                              select = FALSE, session = getDefaultReactiveDomain()) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  tab <- force(as.character(tab))\n  navbar_menu_item <- force(as.character(navbar_menu_item))\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = tab,\n      link = navbar_menu_item,\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}\n$(function() {\n  Shiny.addCustomMessageHandler('insert-tab', function(message) {\n    // define div and li targets\n    let $divTag = $(message.content);\n    let $liTag = $(message.link);\n    \n    if (message.position === 'after') {\n      $divTag.insertAfter($('#' + message.target));\n      $liTag.insertAfter($('[href =\"#' + message.target + '\"]').parent());\n    } else if (message.position === 'before') {\n      $divTag.insertBefore($('#' + message.target));\n      $liTag.insertBefore($('[href =\"#' + message.target + '\"]').parent());\n    }\n    \n    if (message.select) {\n      // trigger a click on corresponding the new tab button. \n      let newTabId = $divTag.attr('id');\n      $('#' + message.inputId + ' a[href=\"#' + newTabId +'\"]').tab('show');\n    }\n  });\n});\ninsert_tabler_tab_example(1)\n\nui <- fluidPage(\n  shiny::actionButton(\"go\", \"Go!\", class = \"btn-success\"),\n  uiOutput(\"slider\"),\n  plotOutput(\"distPlot\")\n)\n\n# Server logic\nserver <- function(input, output) {\n  \n  output$slider <- renderUI({\n    req(input$go > 0)\n    sliderInput(\n      \"obs\", \n      \"Number of observations:\",\n      min = 0, \n      max = 1000, \n      value = 500\n    )\n  })\n  \n  output$distPlot <- renderPlot({\n    req(input$obs)\n    hist(rnorm(input$obs))\n  })\n}\n\n# Complete app with UI and server components\nshinyApp(ui, server)\n\nrenderUI <- function (expr, env = parent.frame(), quoted = FALSE, outputArgs = list()) {\n  installExprFunction(expr, \"func\", env, quoted)\n  createRenderFunction(func, function(result, shinysession, \n                                      name, ...) {\n    if (is.null(result) || length(result) == 0) \n      return(NULL)\n    #processDeps(result, shinysession)\n    result\n  }, uiOutput, outputArgs)\n}\nexports.renderContent($tag[0], {\n  html: $tag.html(),\n  deps: message.tag.deps\n}); \ninsert_tabler_tab <- function(inputId, tab, target, position = c(\"before\", \"after\"),\n                              select = FALSE, session = getDefaultReactiveDomain()) {\n  \n  inputId <- session$ns(inputId)\n  position <- match.arg(position)\n  navbar_menu_item <- tags$li(\n    class = \"nav-item\",\n    a(\n      class = \"nav-link\",\n      href = paste0(\"#\", session$ns(tab$attribs$id)),\n      `data-toggle` = \"pill\",\n      `data-value` = tab$attribs$id,\n      role = \"tab\",\n      tab$attribs$id\n    )\n  )\n  \n  message <- dropNulls(\n    list(\n      inputId = inputId,\n      content = processDeps(tab, session),\n      link = processDeps(navbar_menu_item, session),\n      target = target,\n      position = position,\n      select = select\n    )\n  )\n  session$sendCustomMessage(type = \"insert-tab\", message)\n}\n$(function() {\n  Shiny.addCustomMessageHandler('insert-tab', function(message) {\n    // define div and li targets\n    let $divTag = $(message.content.html);\n    let $liTag = $(message.link.html);\n    \n    if (message.position === 'after') {\n      $divTag.insertAfter($('#' + message.target));\n      $liTag.insertAfter($('[href =\"#' + message.target +   '\"]').parent());\n    } else if (message.position === 'before') {\n      $divTag.insertBefore($('#' + message.target));\n      $liTag.insertBefore($('[href =\"#' + message.target +   '\"]').parent());\n    }\n    \n    // needed to render input/output in newly added tab. It takes the possible\n    // deps and add them to the tag. Indeed, if we insert a tab, its deps are not\n    // included in the page so it can't render properly\n    Shiny.renderContent($liTag[0], {html: $liTag.html(), deps: message.link.deps});\n    Shiny.renderContent($divTag[0], {html: $divTag.html(), deps: message.content.deps});\n    \n    if (message.select) {\n      // trigger a click on corresponding the new tab button. \n      let newTabId = $divTag.attr('id');\n      $('#' + message.inputId + ' a[href=\"#' + newTabId   +'\"]').tab('show');\n    }\n  });\n});\ninsert_tabler_tab_example(2)\n"},{"path":"custom-templates-interactivity.html","id":"exercises-4","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"17.5 Exercises","text":"Taking inspiration insert_tabler_tab function, write remove_tabler_tab function.Based Tabler documentation, add tabler_tooltip function. Hint: may also check corresponding Bootstrap 4 help.","code":""},{"path":"workflow-charpente.html","id":"workflow-charpente","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"18 Introduction to {charpente}","text":"\nFIGURE 18.1: {charpente} package\n","code":""},{"path":"workflow-charpente.html","id":"motivations-1","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"18.1 Motivations","text":"Translating HTML template R API requires creation package. stated Chapter ??, good practice proceed follows:Imagine repeat process twenty components. package structure provides many advantages like:Develop comprehensive documentation underlying APIDesign unit tests guaranty code robustness improve long term planRelevant file organization","code":"\nui <- fluidPage(\n  useShinydashboard(),\n  tags$script(\n    [1172 chars quoted with '\"']\n  ),\n  \n  box2(\n    title = textOutput(\"box_state\"),\n    \"Box body\",\n    inputId = \"mybox\",\n    collapsible = TRUE,\n    plotOutput(\"plot\")\n  ),\n  actionButton(\"toggle_box\", \"Toggle Box\")\n)\n\nserver <- function(input, output, session) {\n  output$plot <- renderPlot({\n      req(!input$mybox$collapsed)\n      plot(rnorm(200))\n    })\n    \n    output$box_state <- renderText({\n      state <- if (input$mybox$collapsed) \"collapsed\" else \"uncollapsed\"\n      paste(\"My box is\", state)\n    })\n    \n    observeEvent(input$toggle_box, {\n      updateBox2(\"mybox\")\n    })\n}\n\nshinyApp(ui, server)\n"},{"path":"workflow-charpente.html","id":"step-by-step","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"18.2 Step by step","text":"{charpente} game changer custom template creation.","code":"\nlibrary(charpente)\npath <- file.path(tempdir(), \"mypkg\")\ncreate_charpente(path)\n# TO FINISH\n"},{"path":"beautify-css.html","id":"beautify-css","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"19 Introduction to CSS","text":"","code":""},{"path":"beautify-sass.html","id":"beautify-sass","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"20 Introduction to SASS","text":"","code":""},{"path":"beautify-with-fresh.html","id":"beautify-with-fresh","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"21 Beautify with fresh","text":"{fresh} R package developed dreamRs team, also authors shinyWidget esquisse. dreamRs projects clearly great source inspiration design outstanding Shiny apps, recommend reader explore!","code":""},{"path":"beautify-with-fresh.html","id":"fresh-the-big-picture","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"21.1 {fresh}, the big picture","text":"CSS probably poor sibling book, mainly focused R JavaScript interactions. Nevertheless, remains important develop consistent themes. One main problem CSS handle growing number files code repetition. Nowadays, web developers mainly use SASS, provides access variables, mathematical operators, nesting, thereby reducing code complexity extending possibilities. Rstudio developed {sass} package, makes possible use Shiny apps Rmarkdown documents. {fresh} built top {sass} see Figures 21.1 21.2 may done minutes!","code":""},{"path":"beautify-with-fresh.html","id":"customize-bs4dash","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"21.1.1 Customize {bs4Dash}","text":"\nFIGURE 21.1: lines code create bs4Dash dark theme!\n","code":"\nlibrary(bs4Dash)\n# Theme -------------------------------------------------------------------\n\nbs4DashTheme <- create_theme(\n  bs4dash_vars(\n    navbar_dark_color = \"#bec5cb\",\n    navbar_dark_active_color = \"#FFF\",\n    navbar_dark_hover_color = \"#FFF\"\n  ),\n  bs4dash_yiq(contrasted_threshold = 10, text_dark = \"#FFF\", text_light = \"#272c30\"),\n  bs4dash_layout(main_bg = \"#353c42\"),\n  bs4dash_sidebar_dark(\n    bg = \"#272c30\", color = \"#bec5cb\", hover_color = \"#FFF\",\n    submenu_bg = \"#272c30\", submenu_color = \"#FFF\", submenu_hover_color = \"#FFF\"\n  ),\n  bs4dash_status(dark = \"#272c30\"),\n  bs4dash_color(gray_900 = \"#FFF\", white = \"#272c30\")\n)\n\n\n\n# App ---------------------------------------------------------------------\n\n\nui <- bs4DashPage(\n  title = \"bs4Dash Dark Mode\",\n  # sidebar_collapsed = FALSE,\n  navbar = bs4DashNavbar(skin = \"dark\"),\n  controlbar = bs4DashControlbar(\n    skin = \"dark\",\n    \"This is the control bar\"\n  ),\n  sidebar = bs4DashSidebar(\n    title = \"bs4Dash Dark Mode\",\n    skin = \"dark\",\n    bs4SidebarMenu(\n      bs4SidebarHeader(\"Menu:\"),\n      bs4SidebarMenuItem(\n        tabName = \"tab1\",\n        text = \"UI components\",\n        icon = \"home\"\n      ),\n      bs4SidebarMenuItem(\n        tabName = \"tab2\",\n        text = \"Tab 2\"\n      ),\n      bs4SidebarMenuItem(\n        text = \"Item List\",\n        icon = \"bars\",\n        startExpanded = TRUE,\n        bs4SidebarMenuSubItem(\n          text = \"Item 1\",\n          tabName = \"item1\",\n          icon = \"circle-thin\"\n        ),\n        bs4SidebarMenuSubItem(\n          text = \"Item 2\",\n          tabName = \"item2\",\n          icon = \"circle-thin\"\n        )\n      )\n    )\n  ),\n  body = bs4DashBody(\n\n    use_theme(bs4DashTheme),\n\n    bs4TabItems(\n      bs4TabItem(\n        tabName = \"tab1\",\n        tags$h2(\"UI components\"),\n        tags$h4(\"bs4ValueBox\"),\n        fluidRow(\n          bs4ValueBox(\n            value = 150,\n            subtitle = \"ValueBox with primary status\",\n            status = \"primary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4ValueBox(\n            value = 150,\n            subtitle = \"ValueBox with secondary status\",\n            status = \"secondary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4ValueBox(\n            value = \"53%\",\n            subtitle = \"ValueBox with danger status\",\n            status = \"danger\",\n            icon = \"cogs\",\n            footer = \"Hello World\",\n            width = 4\n          )\n        ),\n        tags$h4(\"bs4InfoBox\"),\n        fluidRow(\n          bs4InfoBox(\n            value = 150,\n            title = \"InfoBox with primary status\",\n            iconStatus = \"primary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4InfoBox(\n            value = 150,\n            title = \"InfoBox with secondary status\",\n            iconStatus = \"secondary\",\n            icon = \"shopping-cart\",\n            href = \"#\",\n            width = 4\n          ),\n          bs4InfoBox(\n            value = \"53%\",\n            title = \"InfoBox with danger status\",\n            iconStatus = \"danger\",\n            icon = \"cogs\",\n            footer = \"Hello World\",\n            width = 4\n          )\n        ),\n        tags$h4(\"bs4Card\"),\n        fluidRow(\n          bs4Card(\n            title = \"Card with primary status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"primary\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with secondary status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"secondary\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with danger status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"danger\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with warning status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"warning\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with info status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"info\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          ),\n          bs4Card(\n            title = \"Card with success status\",\n            closable = FALSE,\n            width = 6,\n            solidHeader = TRUE,\n            status = \"success\",\n            collapsible = TRUE,\n            p(\"Box Content\")\n          )\n        )\n      ),\n      bs4TabItem(\n        tabName = \"tab2\",\n        \"Nothing to see here\"\n      )\n    )\n  )\n)\n\n\nserver <- function(input, output) {\n\n}\n\n\nshinyApp(ui, server)\n"},{"path":"beautify-with-fresh.html","id":"customize-shinydashboard","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"21.1.2 Customize {shinydashboard}","text":"Similarly, {fresh} supports {shinydashboard} powered apps. lines code, may definitely provide cyberpunk look feel favorite dashboard (Figure 21.2). {shinydashboardPlus} (v2) plug play support {fresh} theme passed dashboardPage freshTheme parameter (also seamlessly work {shinydashboard}). Importantly, strongly suggest avoid setting default green blue, might become confusing. Prefer playing different color palettes.\nFIGURE 21.2: Cyberpunk shinydashboard\n","code":"\ntheme <- create_theme(\n  adminlte_color(\n    green = \"#3fff2d\",\n    blue = \"#2635ff\",\n    red = \" #ff2b2b\",\n    yellow = \"#feff6e\",\n    fuchsia = \"#ff5bf8\",\n    navy = \"#374c92\",\n    purple = \"#615cbf\",\n    maroon = \"#b659c9\",\n    light_blue = \"#5691cc\"\n  ),\n  adminlte_sidebar(\n    dark_bg = \"#D8DEE9\",\n    dark_hover_bg = \"#81A1C1\",\n    dark_color = \"#2E3440\"\n  ),\n  adminlte_global(\n    content_bg = \"#aaaaaa\"\n  )\n)\n\n# create tribble for box global config\nbox_config <- tibble::tribble(\n  ~background, ~labelStatus,\n  \"red\", \"warning\",\n  \"purple\", \"success\",\n  \"green\", \"primary\",\n  \"yellow\", \"danger\",\n  \"fuchsia\", \"info\"\n)\n\n# box factory function\nbox_factory <- function(background, labelStatus) {\n  box(\n    title = \"Cyberpunk Box\", \n    collapsible = TRUE, \n    background = background,\n    height = \"200px\",\n    label = boxLabel(1, labelStatus)\n  )\n}\n\n# pmap magic\nboxes <- purrr::pmap(box_config, box_factory)\n\nshinyApp(\n   ui = dashboardPage(\n     freshTheme = theme,\n     skin = \"blue\",\n     options = list(sidebarExpandOnHover = TRUE),\n     header = dashboardHeader(\n       dropdownMenu(\n         type = \"messages\", \n         badgeStatus = \"success\",\n         messageItem(\n           from = \"Support Team\",\n           message = \"This is the content of a message.\",\n           time = \"5 mins\"\n         ),\n         messageItem(\n           from = \"Support Team\",\n           message = \"This is the content of another message.\",\n           time = \"2 hours\"\n         )\n       )\n     ),\n     sidebar = dashboardSidebar(\n       sidebarMenu(\n         menuItem(\"Item 1\", badgeLabel = icon(\"heart\"), badgeColor = \"light-blue\"),\n         menuItem(\"Item 2\", badgeLabel = icon(\"poo\"), badgeColor = \"maroon\")\n       )\n     ),\n     body = dashboardBody(boxes),\n     controlbar = dashboardControlbar(),\n     title = \"Fresh theming\"\n   ),\n   server = function(input, output) { }\n )\n"},{"path":"references.html","id":"references","chapter":"\n        Outstanding User Interfaces with Shiny\n      ","heading":"References","text":"Allaire, JJ, Yihui Xie, Jonathan McPherson, Javier Luraschi, Kevin Ushey, Aron Atkins, Hadley Wickham, Joe Cheng, Winston Chang, Richard Iannone. 2020. Rmarkdown: Dynamic Documents R. https://github.com/rstudio/rmarkdown.Bache, Stefan Milton, Hadley Wickham. 2014. Magrittr: Forward-Pipe Operator R. https://CRAN.R-project.org/package=magrittr.Chang, Winston, Barbara Borges Ribeiro. 2018. Shinydashboard: Create Dashboards ’Shiny’. https://CRAN.R-project.org/package=shinydashboard.Chang, Winston, Joe Cheng, JJ Allaire, Yihui Xie, Jonathan McPherson. 2020. Shiny: Web Application Framework R. https://CRAN.R-project.org/package=shiny.Chang, Winston, Joe Cheng, Alan Dipert, Barbara Borges. 2020. Websocket: ’WebSocket’ Client Library. https://CRAN.R-project.org/package=websocket.Cheng, Joe, Winston Chang. 2020. Httpuv: HTTP Websocket Server Library. https://CRAN.R-project.org/package=httpuv.Cheng, Joe, Carson Sievert, Winston Chang, Yihui Xie, Jeff Allen. 2020. Htmltools: Tools Html. https://github.com/rstudio/htmltools.Coene, John. 2020. Shinybulma: Bulma Shiny. https://github.com/JohnCoene/shinybulma.Devaux, Gabrielle, David Granjon. 2020. DeminR: DeminR.Fay, Colin, Vincent Guyader, Sébastien Rochette, Cervan Girard. 2020. Golem: Framework Robust Shiny Applications. https://github.com/ThinkR-open/golem.Granjon, David. 2020a. Bs4Dash: ’Bootstrap 4’ Version ’Shinydashboard’.———. 2020b. CaPO4Sim: Virtual Patient Simulator Context Calcium Phosphate Homeostasis.———. 2020c. ShinydashboardPlus: Add ’Adminlte2’ Components ’Shinydashboard’.———. 2020d. TablerDash: ’Tabler’ Api ’Shiny’.Granjon, David, John Coene. 2020. Charpente: Seamlessly Design Robust ’Shiny’ Extensions. https://github.com/RinteRface/charpente.Granjon, David, Victor Perrier, Isabelle Rudolf. 2020. ShinyMobile: Mobile Ready ’Shiny’ Apps Standalone Capabilities.Henry, Lionel, Hadley Wickham. 2020. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.Perrier, Victor, Fanny Meyer. 2020a. Apexcharter: Create Interactive Chart Javascript ’Apexcharts’ Library. https://CRAN.R-project.org/package=apexcharter.———. 2020b. Fresh: Create Custom ’Bootstrap’ Themes Use ’Shiny’. https://CRAN.R-project.org/package=fresh.———. 2020c. Jstools: Tools Work Javascript Css. https://github.com/dreamRs/jstools.Perrier, Victor, Fanny Meyer, David Granjon. 2020. ShinyWidgets: Custom Inputs Widgets Shiny. https://CRAN.R-project.org/package=shinyWidgets.R Core Team. 2019. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/.Sievert, Carson, Joe Cheng. 2020. Thematic: Unified Automatic Theming ’Ggplot2’, ’Lattice’, ’Base’ R Graphics.Teetor, Nathan. 2020. Cascadess: Style Pronoun ’Htmltools’ Tags. https://github.com/nteetor/cascadess.Wickham, Hadley. 2011. “Testthat: Get Started Testing.” R Journal 3: 5–10. https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf.———. 2016. Ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.———. 2020. Testthat: Unit Testing R. https://CRAN.R-project.org/package=testthat.Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, Dewey Dunnington. 2020. Ggplot2: Create Elegant Data Visualisations Using Grammar Graphics. https://CRAN.R-project.org/package=ggplot2.Wickham, Hadley, Romain François, Lionel Henry, Kirill Müller. 2020. Dplyr: Grammar Data Manipulation. https://CRAN.R-project.org/package=dplyr.Wickham, Hadley, Dana Seidel. 2020. Scales: Scale Functions Visualization. https://CRAN.R-project.org/package=scales.Xie, Yihui. 2014. “Knitr: Comprehensive Tool Reproducible Research R.” Implementing Reproducible Computational Research, edited Victoria Stodden, Friedrich Leisch, Roger D. Peng. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595.———. 2015a. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.———. 2015b. Dynamic Documents R Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/.———. 2016. Bookdown: Authoring Books Technical Documents R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/bookdown.———. 2020a. Blogdown: Create Blogs Websites R Markdown. https://CRAN.R-project.org/package=blogdown.———. 2020b. Bookdown: Authoring Books Technical Documents R Markdown. https://github.com/rstudio/bookdown.———. 2020c. Knitr: General-Purpose Package Dynamic Report Generation R. https://CRAN.R-project.org/package=knitr.Xie, Yihui, J. J. Allaire, Garrett Grolemund. 2018. R Markdown: Definitive Guide. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown.Xie, Yihui, Christophe Dervieux, Emily Riederer. 2020. R Markdown Cookbook. Boca Raton, Florida: Chapman; Hall/CRC. https://bookdown.org/yihui/rmarkdown-cookbook.Xie, Yihui, Alison Presmanes Hill, Amber Thomas. 2017. Blogdown: Creating Websites R Markdown. Boca Raton, Florida: Chapman; Hall/CRC. https://github.com/rstudio/blogdown.","code":""}]
